#!/bin/bash
# =============================================================================
# Script de Valida√ß√£o de Sintaxe e Funcionamento
# =============================================================================

set -euo pipefail

echo "=== INICIANDO VALIDA√á√ÉO COMPLETA DOS SCRIPTS ==="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

success_count=0
error_count=0

# Fun√ß√£o para testar sintaxe
test_syntax() {
    local script_file="$1"
    local script_name=$(basename "$script_file")
    
    echo -e "${BLUE}üîç Testando sintaxe: $script_name${NC}"
    
    if bash -n "$script_file" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Sintaxe OK: $script_name${NC}"
        ((success_count++))
        return 0
    else
        echo -e "${RED}‚ùå Erro de sintaxe: $script_name${NC}"
        echo "Detalhes do erro:"
        bash -n "$script_file"
        ((error_count++))
        return 1
    fi
}

# Fun√ß√£o para testar execu√ß√£o em modo dry-run
test_dry_run() {
    local script_file="$1"
    local script_name=$(basename "$script_file")
    
    echo -e "${BLUE}üß™ Testando execu√ß√£o dry-run: $script_name${NC}"
    
    # Criar vers√£o de teste
    local test_file="/tmp/test_${script_name}"
    cp "$script_file" "$test_file"
    
    # Adicionar modo dry-run no in√≠cio
    sed -i '1a\\nDRY_RUN=true' "$test_file"
    
    # Substituir comandos Azure CLI por echo
    sed -i 's/az group create/echo "[DRY-RUN] az group create/g' "$test_file"
    sed -i 's/az aks create/echo "[DRY-RUN] az aks create/g' "$test_file"
    sed -i 's/az network vnet create/echo "[DRY-RUN] az network vnet create/g' "$test_file"
    sed -i 's/az keyvault create/echo "[DRY-RUN] az keyvault create/g' "$test_file"
    
    if timeout 30s bash "$test_file" --help 2>/dev/null || true; then
        echo -e "${GREEN}‚úÖ Execu√ß√£o dry-run OK: $script_name${NC}"
        ((success_count++))
    else
        echo -e "${YELLOW}‚ö†Ô∏è Dry-run com avisos: $script_name${NC}"
    fi
    
    rm -f "$test_file"
}

# Scripts para testar
scripts=(
    "00-provision-complete-lab.sh"
    "00-setup-azure-resources.sh"
    "01-validate-infrastructure.sh"
    "02-comprehensive-testing.sh"
    "04-install-observability.sh"
)

echo "üìã Scripts a serem validados:"
for script in "${scripts[@]}"; do
    echo "  - $script"
done
echo ""

# Testar sintaxe de todos os scripts
echo "üîç FASE 1: Valida√ß√£o de Sintaxe"
echo "================================"
for script in "${scripts[@]}"; do
    if [[ -f "$script" ]]; then
        test_syntax "$script"
    else
        echo -e "${RED}‚ùå Arquivo n√£o encontrado: $script${NC}"
        ((error_count++))
    fi
    echo ""
done

# Testar vari√°veis e depend√™ncias
echo "üîß FASE 2: Valida√ß√£o de Depend√™ncias"
echo "====================================="

# Verificar Azure CLI
if command -v az >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Azure CLI instalado${NC}"
    ((success_count++))
else
    echo -e "${RED}‚ùå Azure CLI n√£o encontrado${NC}"
    ((error_count++))
fi

# Verificar kubectl
if command -v kubectl >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ kubectl instalado${NC}"
    ((success_count++))
else
    echo -e "${RED}‚ùå kubectl n√£o encontrado${NC}"
    ((error_count++))
fi

# Verificar login Azure
if az account show >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Login Azure ativo${NC}"
    ((success_count++))
else
    echo -e "${RED}‚ùå Login Azure necess√°rio${NC}"
    ((error_count++))
fi

echo ""

# Testar vari√°veis de ambiente
echo "üåç FASE 3: Valida√ß√£o de Vari√°veis"
echo "=================================="

# Verificar se scripts definem vari√°veis corretamente
for script in "${scripts[@]}"; do
    if [[ -f "$script" ]]; then
        echo -e "${BLUE}üîç Analisando vari√°veis em: $script${NC}"
        
        # Verificar vari√°veis n√£o definidas
        if grep -n '\$[A-Z_][A-Z0-9_]*' "$script" | grep -v '${.*:-' | head -5; then
            echo -e "${YELLOW}‚ö†Ô∏è Vari√°veis encontradas (verifique se est√£o definidas)${NC}"
        fi
        echo ""
    fi
done

# Resumo final
echo "üìä RESUMO DA VALIDA√á√ÉO"
echo "======================"
echo -e "‚úÖ Sucessos: ${GREEN}$success_count${NC}"
echo -e "‚ùå Erros: ${RED}$error_count${NC}"

if [[ $error_count -eq 0 ]]; then
    echo -e "${GREEN}üéâ TODOS OS TESTES PASSARAM!${NC}"
    echo -e "${GREEN}‚úÖ Scripts prontos para execu√ß√£o${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è PROBLEMAS ENCONTRADOS!${NC}"
    echo -e "${RED}‚ùå Corrija os erros antes de continuar${NC}"
    exit 1
fi