apiVersion: v1
kind: Namespace
metadata:
  name: kiali-operator
  labels:
    istio-injection: enabled
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali-config
  namespace: kiali-operator
data:
  config.yaml: |
    istio_namespace: "aks-istio-system"
    
    auth:
      strategy: "anonymous"
    
    deployment:
      accessible_namespaces: ["**"]
      cluster_wide_access: true
      image_name: "quay.io/kiali/kiali"
      image_version: "v1.73"
      ingress_enabled: true
      namespace: "kiali-operator"
      service_type: "LoadBalancer"
      view_only_mode: false
    
    external_services:
      prometheus:
        url: "http://prometheus-server.prometheus.svc.cluster.local:80"
        custom_metrics_url: "http://prometheus-server.prometheus.svc.cluster.local:80"
      
      grafana:
        enabled: true
        in_cluster_url: "http://grafana.grafana.svc.cluster.local:80"
        url: "http://grafana.grafana.svc.cluster.local:80"
        dashboards:
        - name: "Istio Service Mesh"
          variables:
            namespace: "var-namespace"
            service: "var-service"
        - name: "Istio Workload"
          variables:
            namespace: "var-namespace" 
            workload: "var-workload"
      
      jaeger:
        enabled: true
        in_cluster_url: "http://jaeger-query.jaeger.svc.cluster.local:16686"
        url: "http://jaeger-query.jaeger.svc.cluster.local:16686"
        use_grpc: false
    
    server:
      port: 20001
      web_root: "/kiali"
      web_fqdn: ""
      web_schema: "http"
    
    login_token:
      signing_key: "kiali-signing-key"
      expiration_seconds: 86400
    
    api:
      namespaces:
        exclude:
        - "kube-system"
        - "kube-public"
        - "kube-node-lease"
        - "local-path-storage"
        include: ["**"]
        label_selector_exclude: ""
        label_selector_include: ""
    
    clustering:
      clusters:
      - name: "aks-istio-primary"
        network: "network1"
        accessible_namespaces: ["**"]
        api_endpoint: "https://aks-istio--lab-istio-e8b8de-g8afr1nv.hcp.westus3.azmk8s.io:443"
        secret_name: "kiali-cluster-secret-primary"
      - name: "aks-istio-secondary"
        network: "network2" 
        accessible_namespaces: ["**"]
        api_endpoint: "https://aks-istio--lab-istio-e8b8de-3496ahe4.hcp.westus3.azmk8s.io:443"
        secret_name: "kiali-cluster-secret-secondary"
    
    health_config:
      rate:
      - namespace: ".*"
        kind: ".*"
        name: ".*"
        tolerance:
        - code: "4XX"
          failure_threshold: 10
          protocol: "http"
        - code: "5XX"
          failure_threshold: 5
          protocol: "http"
    
    custom_dashboards:
    - name: "deployment-strategies"
      title: "Deployment Strategies Dashboard"
      runtime: "Go"
      discoverOn: "deployment_strategies"
      items:
      - chart:
          name: "Blue/Green Traffic Split"
          unit: "percentage"
          spans: 6
          metricName: "bluegreen_traffic_split"
          dataType: "histogram"
          aggregations:
          - label: "version"
            displayName: "Version"
      - chart:
          name: "Canary Success Rate"
          unit: "percentage" 
          spans: 6
          metricName: "canary_success_rate"
          dataType: "histogram"
          aggregations:
          - label: "version"
            displayName: "Version"
      - chart:
          name: "A/B Test Results"
          unit: "requests"
          spans: 12
          metricName: "ab_test_requests"
          dataType: "histogram"
          aggregations:
          - label: "user_segment"
            displayName: "User Segment"
          - label: "version"
            displayName: "Version"
            
    kiali_feature_flags:
      certificates_information_indicators:
        enabled: true
        secrets:
        - "cacerts"
        - "istio-ca-secret"
      clustering:
        enabled: true
      disabled_features: []
      validations:
        ignore: ["KIA1301"]
        skip_wildcard_gateway_hosts: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: kiali-operator
  labels:
    app: kiali
    version: "v1.73"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
  template:
    metadata:
      labels:
        app: kiali
        version: "v1.73"
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/kiali/api/v1/status"
    spec:
      serviceAccountName: kiali
      containers:
      - name: kiali
        image: "quay.io/kiali/kiali:v1.73"
        imagePullPolicy: Always
        command:
        - "/opt/kiali/kiali"
        - "-config"
        - "/kiali-configuration/config.yaml"
        ports:
        - name: api-port
          containerPort: 20001
          protocol: TCP
        - name: http-metrics
          containerPort: 9090
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /kiali/healthz
            port: api-port
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /kiali/healthz
            port: api-port
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
        env:
        - name: ACTIVE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "text"
        - name: LOG_TIME_FIELD_FORMAT
          value: "2006-01-02T15:04:05Z07:00"
        - name: LOG_SAMPLER_RATE
          value: "1"
        volumeMounts:
        - name: kiali-configuration
          mountPath: "/kiali-configuration"
        - name: kiali-cert
          mountPath: "/kiali-cert"
        - name: kiali-secret
          mountPath: "/kiali-secret"
        resources:
          requests:
            cpu: "10m"
            memory: "64Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
      volumes:
      - name: kiali-configuration
        configMap:
          name: kiali-config
      - name: kiali-cert
        secret:
          secretName: kiali-cert-secret
          optional: true
      - name: kiali-secret
        secret:
          secretName: kiali-secret
          optional: true
---
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: kiali-operator
  labels:
    app: kiali
    version: "v1.73"
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
spec:
  type: LoadBalancer
  ports:
  - name: http-kiali
    protocol: TCP
    port: 20001
    targetPort: api-port
  - name: http-metrics
    protocol: TCP
    port: 9090
    targetPort: http-metrics
  selector:
    app: kiali
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali
  namespace: kiali-operator
  labels:
    app: kiali
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali
  labels:
    app: kiali
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - endpoints
  - namespaces
  - nodes
  - pods
  - pods/log
  - replicationcontrollers
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups: [""]
  resources:
  - pods/portforward
  verbs:
  - create
  - patch
- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.istio.io
  - security.istio.io
  - extensions.istio.io
  - telemetry.istio.io
  - install.istio.io
  resources: ["*"]
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups: ["apps.openshift.io"]
  resources:
  - deploymentconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups: ["project.openshift.io"]
  resources:
  - projects
  verbs:
  - get
- apiGroups: ["route.openshift.io"]
  resources:
  - routes
  verbs:
  - get
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
  labels:
    app: kiali
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali
subjects:
- kind: ServiceAccount
  name: kiali
  namespace: kiali-operator
