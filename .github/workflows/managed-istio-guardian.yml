name: Managed Istio Guardian

on:
  workflow_dispatch:
    inputs:
      resource-group:
        description: "AKS resource group (leave blank to use repository variable)"
        required: false
        default: ""
      cluster-name:
        description: "AKS cluster name (leave blank to use repository variable)"
        required: false
        default: ""
      azure-region:
        description: "Azure region (leave blank to use repository variable)"
        required: false
        default: ""
  schedule:
    - cron: "17 3 * * 1"

permissions:
  id-token: write
  contents: read
  actions: write

concurrency:
  group: managed-istio-guardian-${{ github.ref }}
  cancel-in-progress: false

jobs:
  detect:
    name: Detect managed Istio state
    runs-on: ubuntu-latest
    outputs:
      resource_group: ${{ steps.resolve.outputs.resource_group }}
      cluster_name: ${{ steps.resolve.outputs.cluster_name }}
      azure_region: ${{ steps.resolve.outputs.azure_region }}
      mesh_mode: ${{ steps.inspect.outputs.mode }}
      mesh_version: ${{ steps.inspect.outputs.version }}
    steps:
      - name: Resolve target scope
        id: resolve
        shell: bash
        env:
          INPUT_RG: ${{ github.event.inputs.resource-group }}
          INPUT_CLUSTER: ${{ github.event.inputs.cluster-name }}
          INPUT_REGION: ${{ github.event.inputs.azure-region }}
          VAR_RG: ${{ vars.AKS_RESOURCE_GROUP }}
          VAR_CLUSTER: ${{ vars.AKS_CLUSTER_NAME }}
          VAR_REGION: ${{ vars.AZURE_REGION }}
        run: |
          set -euo pipefail
          RG="${INPUT_RG}"; CLUSTER="${INPUT_CLUSTER}"; REGION="${INPUT_REGION}"
          [[ -z "${RG}" ]] && RG="${VAR_RG}"
          [[ -z "${CLUSTER}" ]] && CLUSTER="${VAR_CLUSTER}"
          [[ -z "${REGION}" ]] && REGION="${VAR_REGION}"

          if [[ -z "${RG}" || -z "${CLUSTER}" ]]; then
            echo "::error::Resource group and cluster name must be provided via inputs or repository variables." >&2
            exit 1
          fi

          echo "resource_group=${RG}" >> "$GITHUB_OUTPUT"
          echo "cluster_name=${CLUSTER}" >> "$GITHUB_OUTPUT"
          echo "azure_region=${REGION}" >> "$GITHUB_OUTPUT"

          echo "Resolved scope:" | tee -a "$GITHUB_STEP_SUMMARY"
          printf '  • Resource group: %s\n' "${RG}" | tee -a "$GITHUB_STEP_SUMMARY"
          printf '  • Cluster name  : %s\n' "${CLUSTER}" | tee -a "$GITHUB_STEP_SUMMARY"
          printf '  • Azure region  : %s\n' "${REGION}" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Authenticate with Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure aks-preview extension is available
        shell: bash
        run: |
          set -euo pipefail
          az extension show --name aks-preview >/dev/null 2>&1 \
            && az extension update --name aks-preview --only-show-errors \
            || az extension add --name aks-preview --only-show-errors

      - name: Inspect managed Istio configuration
        id: inspect
        shell: bash
        env:
          TARGET_RG: ${{ steps.resolve.outputs.resource_group }}
          TARGET_CLUSTER: ${{ steps.resolve.outputs.cluster_name }}
        run: |
          set -euo pipefail
          STATE_JSON=$(az aks show \
            --resource-group "${TARGET_RG}" \
            --name "${TARGET_CLUSTER}" \
            --query "serviceMeshProfile" \
            --output json || echo "{}")

          MODE=$(echo "${STATE_JSON}" | jq -r '.mode // "Disabled"')
          VERSION=$(echo "${STATE_JSON}" | jq -r '.istio.manifestInfo.componentVersion // ""')

          echo "mode=${MODE}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          {
            echo '### Managed Istio status'
            echo "Mode: ${MODE}"
            echo "Version: ${VERSION:-Unavailable}"
          } >> "$GITHUB_STEP_SUMMARY"

          echo "Managed Istio state: ${STATE_JSON}"

  enable:
    name: Enable managed Istio when required
    runs-on: ubuntu-latest
    needs: detect
    if: ${{ needs.detect.outputs.mesh_mode != 'Istio' }}
    outputs:
      mesh_version: ${{ steps.refresh.outputs.version }}
    steps:
      - name: Authenticate with Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure aks-preview extension is available
        shell: bash
        run: |
          set -euo pipefail
          az extension show --name aks-preview >/dev/null 2>&1 \
            && az extension update --name aks-preview --only-show-errors \
            || az extension add --name aks-preview --only-show-errors

      - name: Enable managed Istio
        shell: bash
        env:
          TARGET_RG: ${{ needs.detect.outputs.resource_group }}
          TARGET_CLUSTER: ${{ needs.detect.outputs.cluster_name }}
        run: |
          set -euo pipefail
          az aks mesh enable \
            --resource-group "${TARGET_RG}" \
            --name "${TARGET_CLUSTER}" \
            --only-show-errors

      - name: Refresh managed Istio metadata
        id: refresh
        shell: bash
        env:
          TARGET_RG: ${{ needs.detect.outputs.resource_group }}
          TARGET_CLUSTER: ${{ needs.detect.outputs.cluster_name }}
        run: |
          set -euo pipefail
          sleep 30
          STATE_JSON=$(az aks show \
            --resource-group "${TARGET_RG}" \
            --name "${TARGET_CLUSTER}" \
            --query "serviceMeshProfile" \
            --output json)

          VERSION=$(echo "${STATE_JSON}" | jq -r '.istio.manifestInfo.componentVersion // ""')
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          {
            echo '### Managed Istio was enabled'
            echo "Version: ${VERSION:-Pending deployment}" 
          } >> "$GITHUB_STEP_SUMMARY"

  record:
    name: Record managed Istio revision
    runs-on: ubuntu-latest
    needs:
      - detect
      - enable
    if: ${{ always() }}
    steps:
      - name: Authenticate with Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure aks-preview extension is available
        shell: bash
        run: |
          set -euo pipefail
          az extension show --name aks-preview >/dev/null 2>&1 \
            && az extension update --name aks-preview --only-show-errors \
            || az extension add --name aks-preview --only-show-errors

      - name: Capture current managed Istio metadata
        id: final
        shell: bash
        env:
          TARGET_RG: ${{ needs.detect.outputs.resource_group }}
          TARGET_CLUSTER: ${{ needs.detect.outputs.cluster_name }}
        run: |
          set -euo pipefail
          STATE_JSON=$(az aks show \
            --resource-group "${TARGET_RG}" \
            --name "${TARGET_CLUSTER}" \
            --query "serviceMeshProfile" \
            --output json || echo "{}")

          MODE=$(echo "${STATE_JSON}" | jq -r '.mode // "Disabled"')
          VERSION=$(echo "${STATE_JSON}" | jq -r '.istio.manifestInfo.componentVersion // ""')

          [[ -z "${VERSION}" ]] && VERSION="${MODE}"

          echo "mode=${MODE}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          {
            echo '### Final managed Istio state'
            echo "Mode: ${MODE}"
            echo "Version or status: ${VERSION}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Persist managed Istio version in repository variable
        shell: bash
        env:
          ISTIO_VERSION: ${{ steps.final.outputs.version }}
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          gh variable set ISTIO_MANAGED_VERSION --repo "$GH_REPO" --body "$ISTIO_VERSION"
          printf 'Managed Istio version stored as repository variable ISTIO_MANAGED_VERSION=%s\n' "$ISTIO_VERSION" >> "$GITHUB_STEP_SUMMARY"

      - name: Highlight managed Istio posture
        if: ${{ needs.detect.outputs.mesh_mode != 'Istio' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('Managed Istio enforcement', 2)
            core.summary.addQuote('Managed Istio add-on was not present and has been enabled automatically.')
            core.summary.addLink('Learn more about AKS managed Istio', 'https://learn.microsoft.com/azure/aks/istio-deploy-addon')
            await core.summary.write()
