'''name: Apply Istio Configuration

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Namespace to apply the configuration'
        required: true
        default: 'pets'
      host:
        description: 'Host for the Ingress Gateway'
        required: true
        default: 'pets.aks-labs.com'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: rg-aks-labs
          cluster-name: aks-labs

      - name: Render and Apply Istio Manifests
        run: |
          chmod +x scripts/render.sh
          
          # Render and apply base manifests
          ./scripts/render.sh -f templates/base/gateway.yaml -s pets-frontend -n ${{ github.event.inputs.namespace }} -h ${{ github.event.inputs.host }} --tls-secret pets-tls-secret -o manifests
          ./scripts/render.sh -f templates/base/virtual-service.yaml -s pets-frontend -n ${{ github.event.inputs.namespace }} -h ${{ github.event.inputs.host }} --service-port 80 -o manifests
          
          # Render and apply security manifests
          ./scripts/render.sh -f templates/security/peer-authentication.yaml -s namespace-wide -n ${{ github.event.inputs.namespace }} -o manifests
          ./scripts/render.sh -f templates/security/authorization-policy.yaml -s pets-api -n ${{ github.event.inputs.namespace }} --caller-sa pets-frontend-sa --method GET --path "/api/pets" -o manifests
          
          # Render and apply traffic management manifests
          ./scripts/render.sh -f templates/traffic-management/destination-rule.yaml -s pets-api -n ${{ github.event.inputs.namespace }} -o manifests
          
          # Render and apply observability manifests
          ./scripts/render.sh -f templates/observability/telemetry.yaml -n ${{ github.event.inputs.namespace }} -s pets-telemetry -o manifests

          # Apply all manifests
          kubectl apply -f manifests/
        working-directory: ${{ github.workspace }}
'''
