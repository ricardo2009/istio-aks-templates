name: CI/CD - Microsoft-First AKS + Istio

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ENVIRONMENT: dev
  PREFIX: istio
  LOCATION: eastus
  SECONDARY_LOCATION: westus

jobs:
  provision-infra:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    outputs:
      rg_core: ${{ steps.deploy.outputs.resourceGroupCore }}
      rg_aks_a: ${{ steps.deploy.outputs.resourceGroupAksA }}
      rg_aks_b: ${{ steps.deploy.outputs.resourceGroupAksB }}
      aks_a_name: ${{ steps.deploy.outputs.aksClusterAName }}
      aks_b_name: ${{ steps.deploy.outputs.aksClusterBName }}
      acr_login_server: ${{ steps.deploy.outputs.acrLoginServer }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy Bicep Infrastructure
      id: deploy
      run: |
        az deployment sub create \
          --location ${{ env.LOCATION }} \
          --template-file infra/bicep/main.bicep \
          --parameters environment=${{ env.ENVIRONMENT }} \
                      location=${{ env.LOCATION }} \
                      secondaryLocation=${{ env.SECONDARY_LOCATION }} \
                      prefix=${{ env.PREFIX }} \
          --name infra-$(date +%Y%m%d-%H%M%S) \
          --output json > deployment.json
        
        echo "resourceGroupCore=$(jq -r '.properties.outputs.resourceGroupCore.value' deployment.json)" >> $GITHUB_OUTPUT
        echo "resourceGroupAksA=$(jq -r '.properties.outputs.resourceGroupAksA.value' deployment.json)" >> $GITHUB_OUTPUT
        echo "resourceGroupAksB=$(jq -r '.properties.outputs.resourceGroupAksB.value' deployment.json)" >> $GITHUB_OUTPUT
        echo "aksClusterAName=$(jq -r '.properties.outputs.aksClusterAName.value' deployment.json)" >> $GITHUB_OUTPUT
        echo "aksClusterBName=$(jq -r '.properties.outputs.aksClusterBName.value' deployment.json)" >> $GITHUB_OUTPUT
        echo "acrLoginServer=$(jq -r '.properties.outputs.acrLoginServer.value' deployment.json)" >> $GITHUB_OUTPUT

  build-images:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: provision-infra
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
    
    - name: Build Orders Image
      run: |
        az acr build \
          --registry $(echo ${{ needs.provision-infra.outputs.acr_login_server }} | cut -d'.' -f1) \
          --image shop/orders:${{ github.sha }} \
          --image shop/orders:latest \
          --file apps/orders/Dockerfile \
          apps/orders
    
    - name: Build Payments Image
      run: |
        az acr build \
          --registry $(echo ${{ needs.provision-infra.outputs.acr_login_server }} | cut -d'.' -f1) \
          --image shop/payments:${{ github.sha }} \
          --image shop/payments:latest \
          --file apps/payments/Dockerfile \
          apps/payments

  deploy-orders:
    name: Deploy Orders to Cluster A
    runs-on: ubuntu-latest
    needs: [provision-infra, build-images]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
    
    - name: Create Namespace
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_a }} \
          --name ${{ needs.provision-infra.outputs.aks_a_name }} \
          --command "kubectl create namespace shop --dry-run=client -o yaml | kubectl apply -f -"
    
    - name: Apply Istio Configs
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_a }} \
          --name ${{ needs.provision-infra.outputs.aks_a_name }} \
          --command "kubectl apply -f -" \
          --file apps/orders/istio/gateway.yaml
    
    - name: Apply Service and Deployment
      run: |
        sed "s|PLACEHOLDER:latest|${{ needs.provision-infra.outputs.acr_login_server }}/shop/orders:${{ github.sha }}|g" apps/orders/k8s/deployment.yaml | \
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_a }} \
          --name ${{ needs.provision-infra.outputs.aks_a_name }} \
          --command "kubectl apply -f -" \
          --file -
    
    - name: Wait for Rollout
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_a }} \
          --name ${{ needs.provision-infra.outputs.aks_a_name }} \
          --command "kubectl rollout status deployment/orders -n shop --timeout=5m"

  deploy-payments:
    name: Deploy Payments to Cluster B
    runs-on: ubuntu-latest
    needs: [provision-infra, build-images]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
    
    - name: Create Namespace
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_b }} \
          --name ${{ needs.provision-infra.outputs.aks_b_name }} \
          --command "kubectl create namespace shop --dry-run=client -o yaml | kubectl apply -f -"
    
    - name: Apply Istio Configs
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_b }} \
          --name ${{ needs.provision-infra.outputs.aks_b_name }} \
          --command "kubectl apply -f -" \
          --file apps/payments/istio/gateway.yaml
    
    - name: Apply Service and Deployment
      run: |
        sed "s|PLACEHOLDER:latest|${{ needs.provision-infra.outputs.acr_login_server }}/shop/payments:${{ github.sha }}|g" apps/payments/k8s/deployment.yaml | \
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_b }} \
          --name ${{ needs.provision-infra.outputs.aks_b_name }} \
          --command "kubectl apply -f -" \
          --file -
    
    - name: Wait for Rollout
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_b }} \
          --name ${{ needs.provision-infra.outputs.aks_b_name }} \
          --command "kubectl rollout status deployment/payments -n shop --timeout=5m"

  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [provision-infra, deploy-orders, deploy-payments]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
    
    - name: Check Orders Health
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_a }} \
          --name ${{ needs.provision-infra.outputs.aks_a_name }} \
          --command "kubectl get pods -n shop -l app=orders"
    
    - name: Check Payments Health
      run: |
        az aks command invoke \
          --resource-group ${{ needs.provision-infra.outputs.rg_aks_b }} \
          --name ${{ needs.provision-infra.outputs.aks_b_name }} \
          --command "kubectl get pods -n shop -l app=payments"
