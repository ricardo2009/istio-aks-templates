# =============================================================================
# TEMPLATE DE DEPLOYMENT - ISTIO TEMPLATES
# =============================================================================
# Template reutiliz√°vel para deployment dos templates Istio

parameters:
  - name: environment
    type: string
  - name: applicationName
    type: string
  - name: namespace
    type: string

steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Processed Manifests'
    inputs:
      buildType: 'current'
      artifactName: 'processed-manifests'
      targetPath: '$(Pipeline.Workspace)/manifests'

  - task: Kubernetes@1
    displayName: 'Create Namespace'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'
      azureResourceGroup: '$(AKS_RESOURCE_GROUP)'
      kubernetesCluster: '$(AKS_CLUSTER_NAME)'
      command: 'apply'
      arguments: '-f -'
      inline: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${{ parameters.namespace }}
          labels:
            istio-injection: enabled
            app: ${{ parameters.applicationName }}
            environment: ${{ parameters.environment }}
            managed-by: azure-devops

  - task: Kubernetes@1
    displayName: 'Deploy Gateway'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'
      azureResourceGroup: '$(AKS_RESOURCE_GROUP)'
      kubernetesCluster: '$(AKS_CLUSTER_NAME)'
      namespace: '${{ parameters.namespace }}'
      command: 'apply'
      arguments: '-f $(Pipeline.Workspace)/manifests/gateway.yaml'

  - task: Kubernetes@1
    displayName: 'Deploy DestinationRule'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'
      azureResourceGroup: '$(AKS_RESOURCE_GROUP)'
      kubernetesCluster: '$(AKS_CLUSTER_NAME)'
      namespace: '${{ parameters.namespace }}'
      command: 'apply'
      arguments: '-f $(Pipeline.Workspace)/manifests/destinationrule.yaml'

  - task: Kubernetes@1
    displayName: 'Deploy VirtualService'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'
      azureResourceGroup: '$(AKS_RESOURCE_GROUP)'
      kubernetesCluster: '$(AKS_CLUSTER_NAME)'
      namespace: '${{ parameters.namespace }}'
      command: 'apply'
      arguments: '-f $(Pipeline.Workspace)/manifests/virtualservice.yaml'

  - task: Kubernetes@1
    displayName: 'Deploy Security Policies'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: '$(AZURE_SUBSCRIPTION)'
      azureResourceGroup: '$(AKS_RESOURCE_GROUP)'
      kubernetesCluster: '$(AKS_CLUSTER_NAME)'
      namespace: '${{ parameters.namespace }}'
      command: 'apply'
      arguments: '-f $(Pipeline.Workspace)/manifests/peer-authentication.yaml -f $(Pipeline.Workspace)/manifests/authorization-policy.yaml'
      
  - task: Bash@3
    displayName: 'Verify Deployment'
    inputs:
      targetType: 'inline'
      script: |
        echo "üîç Verifying deployment for ${{ parameters.applicationName }} in ${{ parameters.environment }}..."
        
        # Wait for resources to be ready
        echo "Waiting for Gateway to be ready..."
        timeout 120 bash -c 'until kubectl get gateway -n ${{ parameters.namespace }} --no-headers | grep -q "Ready"; do sleep 5; done' || true
        
        echo "Waiting for VirtualService to be ready..."
        timeout 120 bash -c 'until kubectl get virtualservice -n ${{ parameters.namespace }} --no-headers | grep -q "."; do sleep 5; done' || true
        
        # Show deployment status
        echo "üìä Deployment Status:"
        kubectl get gateway,virtualservice,destinationrule,peerauthentication,authorizationpolicy -n ${{ parameters.namespace }}
        
        echo "‚úÖ Deployment verification completed"