name: 🚀 Deploy E-commerce Platform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
        - status
      environment:
        description: 'Target environment'
        required: true
        default: 'demo'
        type: choice
        options:
        - demo
        - staging
        - production

env:
  NAMESPACE: ecommerce-${{ github.event.inputs.environment }}
  DOMAIN: ecommerce-${{ github.event.inputs.environment }}.aks-labs.com
  CLUSTER_NAME: aks-labs
  RESOURCE_GROUP: rg-aks-labs

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    if: github.event.inputs.action == 'deploy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: ⚙️ Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: 🔗 Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: 🔍 Verify Cluster Connection
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: 🔍 Verify Istio Installation
      run: |
        kubectl get namespace aks-istio-system
        kubectl get pods -n aks-istio-system
        
    - name: 📦 Create Namespace
      run: |
        kubectl apply -f demo-app/k8s-manifests/namespace.yaml
        kubectl get namespace ${{ env.NAMESPACE }}
        
    - name: 🛡️ Apply Security Policies
      run: |
        echo "Applying namespace-level security policies..."
        
        chmod +x scripts/render.sh
        
        ./scripts/render.sh \
          -f templates/security/namespace-security-policy.yaml \
          -s ecommerce -n ${{ env.NAMESPACE }}
          
        kubectl apply -f manifests/ecommerce/namespace-security-policy.yaml
        
        echo "✅ Security policies applied"
        
    - name: 🚀 Deploy Application Services
      run: |
        echo "Deploying e-commerce application services..."
        
        kubectl apply -f demo-app/k8s-manifests/frontend.yaml
        kubectl apply -f demo-app/k8s-manifests/api-gateway.yaml
        kubectl apply -f demo-app/k8s-manifests/backend-services.yaml
        
        echo "✅ Application services deployed"
        
    - name: ⏳ Wait for Pods to be Ready
      run: |
        echo "Waiting for all pods to be ready..."
        
        services=("frontend" "api-gateway" "user-service" "order-service" "payment-service" "notification-service")
        
        for service in "${services[@]}"; do
          echo "Waiting for $service..."
          kubectl wait --for=condition=ready pod \
            --selector=app=$service \
            --namespace=${{ env.NAMESPACE }} \
            --timeout=300s
          echo "✅ $service is ready"
        done
        
    - name: 🌐 Configure Istio Gateway
      run: |
        echo "Configuring Istio Gateway..."
        
        ./scripts/render.sh \
          -f templates/base/advanced-gateway.yaml \
          -s frontend -n ${{ env.NAMESPACE }} \
          -h ${{ env.DOMAIN }} \
          --tls-secret ecommerce-tls
          
        kubectl apply -f manifests/frontend/advanced-gateway.yaml
        
        echo "✅ Istio Gateway configured"
        
    - name: 🔀 Configure Traffic Management
      run: |
        echo "Configuring traffic management for all services..."
        
        services=("frontend" "api-gateway" "user-service" "order-service" "payment-service" "notification-service")
        
        for service in "${services[@]}"; do
          echo "Configuring traffic management for $service..."
          
          # VirtualService
          ./scripts/render.sh \
            -f templates/traffic-management/advanced-virtual-service.yaml \
            -s "$service" -n ${{ env.NAMESPACE }} \
            -h ${{ env.DOMAIN }}
            
          kubectl apply -f "manifests/$service/advanced-virtual-service.yaml"
          
          # DestinationRule with circuit breakers
          if [ "$service" = "payment-service" ]; then
            ./scripts/render.sh \
              -f templates/traffic-management/advanced-destination-rule.yaml \
              -s "$service" -n ${{ env.NAMESPACE }} \
              --max-connections 30 \
              --consecutive-5xx-errors 3 \
              --base-ejection-time 60s
          else
            ./scripts/render.sh \
              -f templates/traffic-management/advanced-destination-rule.yaml \
              -s "$service" -n ${{ env.NAMESPACE }}
          fi
          
          kubectl apply -f "manifests/$service/advanced-destination-rule.yaml"
          
          echo "✅ Traffic management configured for $service"
        done
        
    - name: 🔒 Apply Security Configurations
      run: |
        echo "Applying security configurations for all services..."
        
        services=("frontend" "api-gateway" "user-service" "order-service" "payment-service" "notification-service")
        
        for service in "${services[@]}"; do
          echo "Applying security for $service..."
          
          # PeerAuthentication (mTLS STRICT)
          ./scripts/render.sh \
            -f templates/security/peer-authentication.yaml \
            -s "$service" -n ${{ env.NAMESPACE }}
            
          kubectl apply -f "manifests/$service/peer-authentication.yaml"
          
          # AuthorizationPolicy
          ./scripts/render.sh \
            -f templates/security/authorization-policy.yaml \
            -s "$service" -n ${{ env.NAMESPACE }} \
            --caller-sa api-gateway \
            --method GET \
            --path "/"
            
          kubectl apply -f "manifests/$service/authorization-policy.yaml"
          
          echo "✅ Security configured for $service"
        done
        
    - name: 📊 Configure Observability
      run: |
        echo "Configuring observability for all services..."
        
        services=("frontend" "api-gateway" "user-service" "order-service" "payment-service" "notification-service")
        
        for service in "${services[@]}"; do
          echo "Configuring observability for $service..."
          
          ./scripts/render.sh \
            -f templates/observability/advanced-telemetry.yaml \
            -s "$service" -n ${{ env.NAMESPACE }}
            
          kubectl apply -f "manifests/$service/advanced-telemetry.yaml"
          
          echo "✅ Observability configured for $service"
        done
        
    - name: 🔍 Verify Deployment
      run: |
        echo "Verifying deployment status..."
        
        echo "📦 Pods:"
        kubectl get pods -n ${{ env.NAMESPACE }}
        
        echo ""
        echo "🌐 Services:"
        kubectl get services -n ${{ env.NAMESPACE }}
        
        echo ""
        echo "🔧 Istio Configurations:"
        kubectl get gateway,virtualservice,destinationrule -n ${{ env.NAMESPACE }}
        
        echo ""
        echo "🔒 Security Policies:"
        kubectl get peerauthentication,authorizationpolicy -n ${{ env.NAMESPACE }}
        
        echo ""
        echo "📊 Telemetry:"
        kubectl get telemetry -n ${{ env.NAMESPACE }}
        
    - name: 🌐 Get Application URL
      run: |
        echo "Getting application access information..."
        
        EXTERNAL_IP=$(kubectl get service aks-istio-ingressgateway-external \
          -n aks-istio-system \
          -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
        if [ -n "$EXTERNAL_IP" ]; then
          echo "🌐 Application URL: https://$EXTERNAL_IP"
          echo "🌐 Domain: ${{ env.DOMAIN }}"
          echo "📝 Add this to your /etc/hosts file:"
          echo "$EXTERNAL_IP ${{ env.DOMAIN }}"
        else
          echo "⚠️ External IP not yet assigned. Check again in a few minutes:"
          echo "kubectl get service aks-istio-ingressgateway-external -n aks-istio-system"
        fi
        
    - name: 📋 Deployment Summary
      run: |
        echo "🎉 E-commerce Platform Deployment Summary"
        echo "========================================"
        echo "✅ Namespace: ${{ env.NAMESPACE }}"
        echo "✅ Services deployed: 6"
        echo "✅ Istio Gateway configured"
        echo "✅ mTLS STRICT enabled"
        echo "✅ Circuit breakers configured"
        echo "✅ Observability enabled"
        echo "✅ Security policies applied"
        echo ""
        echo "🎯 Next Steps:"
        echo "1. Access the application via the external IP"
        echo "2. Run advanced deployment strategies"
        echo "3. Monitor metrics and test rollback scenarios"
        echo "4. Execute chaos engineering tests"

  destroy:
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: ⚙️ Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: 🔗 Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: 🗑️ Remove Istio Configurations
      run: |
        echo "Removing Istio configurations..."
        
        kubectl delete gateway,virtualservice,destinationrule,peerauthentication,authorizationpolicy,telemetry \
          --all -n ${{ env.NAMESPACE }} --ignore-not-found=true
          
        echo "✅ Istio configurations removed"
        
    - name: 🗑️ Remove Application
      run: |
        echo "Removing application resources..."
        
        kubectl delete -f demo-app/k8s-manifests/ --ignore-not-found=true
        
        echo "✅ Application resources removed"
        
    - name: 🗑️ Remove Namespace
      run: |
        echo "Removing namespace..."
        
        kubectl delete namespace ${{ env.NAMESPACE }} --ignore-not-found=true
        
        echo "✅ Namespace removed"
        
    - name: 📋 Cleanup Summary
      run: |
        echo "🧹 Cleanup Summary"
        echo "=================="
        echo "✅ Istio configurations removed"
        echo "✅ Application services removed"
        echo "✅ Namespace removed"
        echo "✅ Environment cleaned up"

  status:
    if: github.event.inputs.action == 'status'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔐 Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: ⚙️ Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: 🔗 Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing
          
    - name: 🔍 Check Environment Status
      run: |
        echo "🔍 Checking environment status for ${{ env.NAMESPACE }}..."
        
        if kubectl get namespace ${{ env.NAMESPACE }} >/dev/null 2>&1; then
          echo "✅ Namespace ${{ env.NAMESPACE }} exists"
          
          echo ""
          echo "📦 Pods Status:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          
          echo ""
          echo "🌐 Services Status:"
          kubectl get services -n ${{ env.NAMESPACE }}
          
          echo ""
          echo "🔧 Istio Configurations:"
          kubectl get gateway,virtualservice,destinationrule -n ${{ env.NAMESPACE }}
          
          echo ""
          echo "🔒 Security Policies:"
          kubectl get peerauthentication,authorizationpolicy -n ${{ env.NAMESPACE }}
          
          echo ""
          echo "📊 Resource Usage:"
          kubectl top pods -n ${{ env.NAMESPACE }} 2>/dev/null || echo "Metrics not available"
          
        else
          echo "❌ Namespace ${{ env.NAMESPACE }} does not exist"
          echo "Run the deploy action first to create the environment"
        fi
