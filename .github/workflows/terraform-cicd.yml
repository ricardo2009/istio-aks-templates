name: Terraform Plan & Apply

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - hml
          - prd

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TERRAFORM_VERSION: '1.5.7'

jobs:
  # ============================================================================
  # VALIDATION - Lint, Format, Security Scan
  # ============================================================================
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive terraform/
        continue-on-error: true

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run tflint
        run: |
          cd terraform
          tflint --init
          tflint --recursive

      - name: Install tfsec
        run: |
          wget -q https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec-linux-amd64
          sudo mv tfsec-linux-amd64 /usr/local/bin/tfsec

      - name: Run tfsec
        run: |
          cd terraform
          tfsec . --soft-fail

      - name: Comment PR - Validation Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # ============================================================================
  # PLAN - Generate execution plan for each environment
  # ============================================================================
  plan:
    name: Plan (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        environment: [dev, hml, prd]
    environment:
      name: ${{ matrix.environment }}-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=istio-aks-${{ matrix.environment }}.tfstate"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var-file="env/${{ matrix.environment }}.tfvars" \
            -out=tfplan-${{ matrix.environment }} \
            -no-color
        continue-on-error: true

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: terraform/tfplan-${{ matrix.environment }}
          retention-days: 5

      - name: Install Infracost
        if: github.event_name == 'pull_request'
        run: |
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

      - name: Generate Cost Estimate
        if: github.event_name == 'pull_request'
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: |
          cd terraform
          infracost breakdown \
            --path . \
            --terraform-var-file env/${{ matrix.environment }}.tfvars \
            --format json \
            --out-file /tmp/infracost-${{ matrix.environment }}.json

      - name: Post Cost Comment
        if: github.event_name == 'pull_request'
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: |
          infracost comment github \
            --path /tmp/infracost-${{ matrix.environment }}.json \
            --repo ${{ github.repository }} \
            --pull-request ${{ github.event.pull_request.number }} \
            --github-token ${{ secrets.GITHUB_TOKEN }} \
            --behavior update

      - name: Comment PR - Plan Output
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan 📖 (\`${{ matrix.environment }}\`)
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Environment: \`${{ matrix.environment }}\`, Pushed by: @${{ github.actor }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # ============================================================================
  # POLICY CHECK - Conftest/OPA validation
  # ============================================================================
  policy-check:
    name: Policy Check
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz
          tar xzf conftest_Linux_x86_64.tar.gz
          sudo mv conftest /usr/local/bin/

      - name: Run Policy Tests
        run: |
          cd terraform
          # Example: Ensure all resources have required tags
          # conftest test -p policy/ .

  # ============================================================================
  # APPLY - Deploy to environment (manual approval for prd)
  # ============================================================================
  apply:
    name: Apply (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: [plan, policy-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        environment: [dev]  # Only auto-deploy dev
      max-parallel: 1
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: terraform/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=istio-aks-${{ matrix.environment }}.tfstate"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply \
            -auto-approve \
            tfplan-${{ matrix.environment }}

  # ============================================================================
  # APPLY PRODUCTION - Manual trigger with approval
  # ============================================================================
  apply-production:
    name: Apply Production
    runs-on: ubuntu-latest
    needs: [plan, policy-check]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prd'
    environment:
      name: prd
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=istio-aks-prd.tfstate"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var-file="env/prd.tfvars" \
            -out=tfplan-prd

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply \
            -auto-approve \
            tfplan-prd

  # ============================================================================
  # DRIFT DETECTION - Check for configuration drift
  # ============================================================================
  drift-detection:
    name: Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [dev, hml, prd]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=istio-aks-${{ matrix.environment }}.tfstate"

      - name: Check for Drift
        id: drift
        run: |
          cd terraform
          terraform plan \
            -var-file="env/${{ matrix.environment }}.tfvars" \
            -detailed-exitcode || echo "DRIFT_DETECTED=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Create Issue for Drift
        if: steps.drift.outputs.DRIFT_DETECTED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `⚠️ Configuration Drift Detected - ${{ matrix.environment }}`,
              body: `Terraform drift detected in **${{ matrix.environment }}** environment.
              
              Please review and reconcile the infrastructure.
              
              **Environment:** ${{ matrix.environment }}
              **Detected:** ${{ new Date().toISOString() }}
              
              [View Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['infrastructure', 'drift', '${{ matrix.environment }}']
            })
