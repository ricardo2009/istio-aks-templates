name: Deploy Istio Templates

on:
  push:
    branches: [main]
    paths:
      - 'templates/**'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'templates/**'
      - 'scripts/**'
      - '.github/workflows/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    name: Validate Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install yamllint

      - name: Lint YAML values files
        run: |
          echo "üîç Validando sintaxe YAML dos arquivos de valores..."
          yamllint templates/values*.yaml

      - name: Validate all environments
        run: |
          echo "üß™ Executando valida√ß√£o completa de todos os ambientes..."
          python scripts/validate_templates.py -t templates

      - name: Test rendering - Default
        run: |
          echo "üìù Testando renderiza√ß√£o ambiente padr√£o..."
          python scripts/helm_render.py -t templates -v templates/values.yaml -o /tmp/manifests/default --strict

      - name: Test rendering - Staging
        run: |
          echo "üìù Testando renderiza√ß√£o staging..."
          python scripts/helm_render.py -t templates -v templates/values-staging.yaml -o /tmp/manifests/staging --strict

      - name: Test rendering - Production
        run: |
          echo "üìù Testando renderiza√ß√£o production..."
          python scripts/helm_render.py -t templates -v templates/values-production.yaml -o /tmp/manifests/production --strict

      - name: Upload validation artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: validation-manifests
          path: /tmp/manifests/
          retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Render staging manifests
        run: |
          echo "üîß Renderizando manifests para staging..."
          python scripts/helm_render.py -t templates -v templates/values-staging.yaml -o manifests/staging --strict

      - name: Upload staging manifests
        uses: actions/upload-artifact@v3
        with:
          name: staging-manifests
          path: manifests/staging/
          retention-days: 30

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME_STAGING }} --overwrite-existing

      - name: Deploy to AKS Staging
        run: |
          echo "üöÄ Aplicando manifests no cluster staging..."
          kubectl apply -f manifests/staging/

      - name: Verify deployment
        run: |
          echo "‚úÖ Verificando recursos criados..."
          kubectl get gateway,virtualservice,destinationrule,peerauthentication -n pets-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Render production manifests
        run: |
          echo "üîß Renderizando manifests para production..."
          python scripts/helm_render.py -t templates -v templates/values-production.yaml -o manifests/production --strict

      - name: Upload production manifests
        uses: actions/upload-artifact@v3
        with:
          name: production-manifests
          path: manifests/production/
          retention-days: 90

      - name: Setup Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME_PROD }} --overwrite-existing

      - name: Deploy to AKS Production
        run: |
          echo "üöÄ Aplicando manifests no cluster production..."
          kubectl apply -f manifests/production/

      - name: Verify deployment
        run: |
          echo "‚úÖ Verificando recursos criados..."
          kubectl get gateway,virtualservice,destinationrule,peerauthentication -n pets-prod
