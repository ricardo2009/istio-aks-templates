# =============================================================================
# GITHUB ACTIONS WORKFLOW - ENTERPRISE RELEASE MANAGEMENT
# =============================================================================
# Workflow de alt√≠ssimo n√≠vel para releases automatizados, versionamento
# sem√¢ntico e publica√ß√£o de templates Istio

name: üö¢ Release Management

on:
  push:
    branches:
      - main
    paths:
      - 'templates/**'
      - 'overlays/**'
      - 'scripts/**'
      - 'VERSION'
  pull_request:
    branches:
      - main
    types: [closed]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      custom_version:
        description: 'Custom version (overrides release_type)'
        required: false
        type: string
      skip_tests:
        description: 'Skip validation tests'
        required: false
        default: false
        type: boolean

env:
  # Release configuration
  DEFAULT_BRANCH: 'main'
  PRERELEASE_SUFFIX: 'beta'
  
  # Package configuration
  PACKAGE_NAME: 'istio-templates-aks'
  REGISTRY_URL: 'ghcr.io'
  
  # Notification settings
  RELEASE_WEBHOOK: ${{ vars.RELEASE_WEBHOOK_URL }}

permissions:
  contents: write
  packages: write
  pull-requests: write
  actions: read

# =============================================================================
# CONCURRENT EXECUTIONS
# =============================================================================
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ===========================================================================
  # JOB 1: AN√ÅLISE DE MUDAN√áAS E DETERMINA√á√ÉO DE VERS√ÉO
  # ===========================================================================
  analyze-changes:
    name: üîç Analyze Changes & Determine Version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true
    
    outputs:
      should-release: ${{ steps.changes.outputs.should-release }}
      release-type: ${{ steps.version.outputs.release-type }}
      current-version: ${{ steps.version.outputs.current-version }}
      next-version: ${{ steps.version.outputs.next-version }}
      changelog: ${{ steps.changes.outputs.changelog }}
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Analyze changes since last release
        id: changes
        run: |
          echo "üîç Analyzing changes since last release..."
          
          # Get last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last release: ${LAST_TAG}"
          
          # Get changes since last tag
          CHANGES=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)" | head -50)
          CHANGE_COUNT=$(echo "$CHANGES" | wc -l)
          
          # Analyze commit messages for conventional commits
          MAJOR_CHANGES=$(git log ${LAST_TAG}..HEAD --grep="BREAKING CHANGE" --oneline | wc -l)
          MINOR_CHANGES=$(git log ${LAST_TAG}..HEAD --grep="^feat" --oneline | wc -l)
          PATCH_CHANGES=$(git log ${LAST_TAG}..HEAD --grep="^fix\|^chore\|^docs" --oneline | wc -l)
          
          # Determine if release is needed
          if [[ $CHANGE_COUNT -gt 0 ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Release needed - $CHANGE_COUNT changes found"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è No release needed - no changes found"
          fi
          
          # Save changelog
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "major-changes=${MAJOR_CHANGES}" >> $GITHUB_OUTPUT
          echo "minor-changes=${MINOR_CHANGES}" >> $GITHUB_OUTPUT
          echo "patch-changes=${PATCH_CHANGES}" >> $GITHUB_OUTPUT

      - name: üìä Determine next version
        id: version
        if: steps.changes.outputs.should-release == 'true'
        run: |
          echo "üìä Determining next version..."
          
          # Get current version
          if [[ -f VERSION ]]; then
            CURRENT_VERSION=$(cat VERSION)
          else
            CURRENT_VERSION="0.0.0"
          fi
          
          echo "current-version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          
          # Determine release type
          if [[ "${{ inputs.custom_version }}" != "" ]]; then
            NEXT_VERSION="${{ inputs.custom_version }}"
            RELEASE_TYPE="custom"
          elif [[ "${{ inputs.release_type }}" != "" ]]; then
            RELEASE_TYPE="${{ inputs.release_type }}"
          elif [[ "${{ steps.changes.outputs.major-changes }}" -gt 0 ]]; then
            RELEASE_TYPE="major"
          elif [[ "${{ steps.changes.outputs.minor-changes }}" -gt 0 ]]; then
            RELEASE_TYPE="minor"
          else
            RELEASE_TYPE="patch"
          fi
          
          # Calculate next version if not custom
          if [[ "$RELEASE_TYPE" != "custom" ]]; then
            # Parse current version
            IFS='.' read -ra VERSION_PARTS <<< "${CURRENT_VERSION#v}"
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}
            
            case "$RELEASE_TYPE" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
              "prerelease")
                PATCH=$((PATCH + 1))
                NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}-${PRERELEASE_SUFFIX}.$(date +%Y%m%d%H%M)"
                ;;
            esac
            
            if [[ "$RELEASE_TYPE" != "prerelease" ]]; then
              NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            fi
          fi
          
          echo "release-type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          echo "next-version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          
          echo "üéØ Release plan:"
          echo "- Current: ${CURRENT_VERSION}"
          echo "- Next: ${NEXT_VERSION}"
          echo "- Type: ${RELEASE_TYPE}"

  # ===========================================================================
  # JOB 2: VALIDA√á√ÉO PR√â-RELEASE
  # ===========================================================================
  pre-release-validation:
    name: ‚úÖ Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should-release == 'true' && inputs.skip_tests != true
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîÑ Run validation workflow
        uses: ./.github/workflows/validate-test-templates.yml
        with:
          test_scope: 'release'
          environment: 'staging'

      - name: ‚úÖ Validation summary
        run: |
          echo "‚úÖ Pre-release validation completed successfully!"

  # ===========================================================================
  # JOB 3: CRIA√á√ÉO DE RELEASE
  # ===========================================================================
  create-release:
    name: üö¢ Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [analyze-changes, pre-release-validation]
    if: |
      always() && 
      needs.analyze-changes.outputs.should-release == 'true' &&
      (needs.pre-release-validation.result == 'success' || needs.pre-release-validation.result == 'skipped')
    
    outputs:
      release-id: ${{ steps.release.outputs.id }}
      release-url: ${{ steps.release.outputs.html_url }}
      release-tag: ${{ steps.release.outputs.tag_name }}
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Update version files
        run: |
          echo "üè∑Ô∏è Updating version files..."
          
          NEW_VERSION="${{ needs.analyze-changes.outputs.next-version }}"
          
          # Update VERSION file
          echo "${NEW_VERSION}" > VERSION
          
          # Update version in README
          if [[ -f README.md ]]; then
            sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: ${NEW_VERSION}/g" README.md || true
            sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v${NEW_VERSION}/g" README.md || true
          fi
          
          # Update version in package manifests if they exist
          if [[ -f package.json ]]; then
            jq ".version = \"${NEW_VERSION}\"" package.json > package.json.tmp && mv package.json.tmp package.json
          fi
          
          echo "‚úÖ Version files updated to ${NEW_VERSION}"

      - name: üì¶ Package templates
        run: |
          echo "üì¶ Creating release package..."
          
          # Create release directory
          mkdir -p release-package
          
          # Copy templates and overlays
          cp -r templates/ release-package/
          cp -r overlays/ release-package/
          cp -r scripts/ release-package/
          
          # Copy documentation
          cp README.md VALUES_REFERENCE.md DEPLOYMENT_GUIDE.md release-package/ 2>/dev/null || true
          cp VERSION release-package/
          
          # Create package info
          cat > release-package/PACKAGE_INFO.md << EOF
          # Istio Templates for AKS - Release Package
          
          **Version**: ${{ needs.analyze-changes.outputs.next-version }}  
          **Release Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          **Release Type**: ${{ needs.analyze-changes.outputs.release-type }}
          
          ## Package Contents
          
          - **templates/**: Istio configuration templates
          - **overlays/**: Environment-specific overlays  
          - **scripts/**: Processing and deployment scripts
          - **Documentation**: Setup and usage guides
          
          ## Quick Start
          
          1. Extract package contents
          2. Configure your values.yaml
          3. Run preprocessing script
          4. Apply to your AKS cluster
          
          See README.md for detailed instructions.
          EOF
          
          # Create tarball
          tar -czf istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz -C release-package .
          
          echo "üì¶ Package created: istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz"

      - name: üìã Generate release notes
        id: release-notes
        run: |
          echo "üìã Generating release notes..."
          
          cat > release-notes.md << EOF
          # üö¢ Istio Templates for AKS - v${{ needs.analyze-changes.outputs.next-version }}
          
          ## üìä Release Summary
          
          **Release Type**: ${{ needs.analyze-changes.outputs.release-type }}  
          **Previous Version**: ${{ needs.analyze-changes.outputs.current-version }}  
          **Release Date**: $(date -u '+%Y-%m-%d')
          
          ## üéØ What's New
          
          ${{ needs.analyze-changes.outputs.changelog }}
          
          ## üì¶ Assets
          
          - **Source Code**: Complete source code archive
          - **Release Package**: Pre-packaged templates ready for deployment
          - **Documentation**: Updated guides and references
          
          ## üöÄ Quick Deployment
          
          \`\`\`bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.analyze-changes.outputs.next-version }}/istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz
          tar -xzf istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz
          
          # Configure and deploy
          cp values.yaml.example values.yaml
          # Edit values.yaml with your configuration
          ./scripts/preprocess-templates.sh prod myapp mynamespace
          kubectl apply -f .generated/processed/ -n mynamespace
          \`\`\`
          
          ## üîß Compatibility
          
          - **Istio**: 1.18.0+
          - **Kubernetes**: 1.26.0+
          - **AKS**: Managed Istio Add-on
          
          ## üìö Documentation
          
          - [Deployment Guide](./DEPLOYMENT_GUIDE.md)
          - [Values Reference](./VALUES_REFERENCE.md)
          - [Troubleshooting](./README.md#troubleshooting)
          
          ## üíù Contributors
          
          Thank you to all contributors who made this release possible!
          
          $(git log ${{ needs.analyze-changes.outputs.current-version }}..HEAD --format="- @%an" | sort -u | head -10)
          
          ---
          
          **Full Changelog**: [\`${{ needs.analyze-changes.outputs.current-version }}...v${{ needs.analyze-changes.outputs.next-version }}\`](https://github.com/${{ github.repository }}/compare/${{ needs.analyze-changes.outputs.current-version }}...v${{ needs.analyze-changes.outputs.next-version }})
          EOF

      - name: üíæ Commit version updates
        run: |
          echo "üíæ Committing version updates..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add VERSION README.md package.json 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üîñ Bump version to v${{ needs.analyze-changes.outputs.next-version }}"
            git push
          fi

      - name: üö¢ Create GitHub Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.analyze-changes.outputs.next-version }}
          release_name: üö¢ Istio Templates AKS v${{ needs.analyze-changes.outputs.next-version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.analyze-changes.outputs.next-version, 'beta') }}

      - name: üìé Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz
          asset_name: istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz
          asset_content_type: application/gzip

  # ===========================================================================
  # JOB 4: PUBLICA√á√ÉO EM REGISTRIES
  # ===========================================================================
  publish-packages:
    name: üì¶ Publish Packages
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: create-release
    if: success()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîê Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Create OCI package
        run: |
          echo "üì¶ Creating OCI package for templates..."
          
          # Install oras for OCI artifact publishing
          curl -LO https://github.com/oras-project/oras/releases/download/v1.1.0/oras_1.1.0_linux_amd64.tar.gz
          tar -xzf oras_1.1.0_linux_amd64.tar.gz
          sudo mv oras /usr/local/bin/
          
          # Package templates as OCI artifact
          PACKAGE_REF="${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }}:v${{ needs.analyze-changes.outputs.next-version }}"
          
          # Create manifest
          cat > manifest.json << EOF
          {
            "schemaVersion": 2,
            "mediaType": "application/vnd.oci.image.manifest.v1+json",
            "config": {
              "mediaType": "application/vnd.istio.templates.config.v1+json",
              "size": 0,
              "digest": "sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a"
            },
            "layers": [
              {
                "mediaType": "application/vnd.istio.templates.layer.v1.tar+gzip",
                "size": $(stat -c%s istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz),
                "digest": "$(sha256sum istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz | cut -d' ' -f1)"
              }
            ]
          }
          EOF
          
          # Push to registry
          oras push ${PACKAGE_REF} \
            --manifest-config /dev/null:application/vnd.istio.templates.config.v1+json \
            istio-templates-aks-${{ needs.analyze-changes.outputs.next-version }}.tar.gz:application/vnd.istio.templates.layer.v1.tar+gzip \
            --annotation "org.opencontainers.image.title=Istio Templates for AKS" \
            --annotation "org.opencontainers.image.description=Production-ready Istio templates for Azure Kubernetes Service" \
            --annotation "org.opencontainers.image.version=${{ needs.analyze-changes.outputs.next-version }}" \
            --annotation "org.opencontainers.image.source=https://github.com/${{ github.repository }}"
          
          echo "‚úÖ Package published to ${PACKAGE_REF}"

      - name: üè∑Ô∏è Tag latest version
        if: ${{ !contains(needs.analyze-changes.outputs.next-version, 'beta') }}
        run: |
          echo "üè∑Ô∏è Tagging as latest version..."
          
          LATEST_REF="${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }}:latest"
          
          oras cp \
            "${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }}:v${{ needs.analyze-changes.outputs.next-version }}" \
            "${LATEST_REF}"
          
          echo "‚úÖ Tagged as latest: ${LATEST_REF}"

  # ===========================================================================
  # JOB 5: NOTIFICA√á√ïES E P√ìS-RELEASE
  # ===========================================================================
  post-release:
    name: üì¢ Post-Release Actions
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, publish-packages]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: üì¢ Send release notification
        if: env.RELEASE_WEBHOOK != ''
        run: |
          echo "üì¢ Sending release notification..."
          
          # Send Teams webhook
          curl -H "Content-Type: application/json" -d '{
            "summary": "New Istio Templates Release",
            "title": "üö¢ New Release: v${{ needs.analyze-changes.outputs.next-version }}",
            "text": "A new version of Istio Templates for AKS has been released!",
            "themeColor": "28a745",
            "sections": [{
              "activityTitle": "Release Information",
              "activitySubtitle": "Version ${{ needs.analyze-changes.outputs.next-version }}",
              "facts": [
                {"name": "Release Type", "value": "${{ needs.analyze-changes.outputs.release-type }}"},
                {"name": "Previous Version", "value": "${{ needs.analyze-changes.outputs.current-version }}"},
                {"name": "Publication", "value": "${{ needs.publish-packages.result == 'success' && '‚úÖ Published' || '‚ö†Ô∏è Pending' }}"}
              ],
              "text": "${{ needs.analyze-changes.outputs.changelog }}"
            }],
            "potentialAction": [{
              "@type": "OpenUri",
              "name": "View Release",
              "targets": [{"os": "default", "uri": "${{ needs.create-release.outputs.release-url }}"}]
            }, {
              "@type": "OpenUri", 
              "name": "Download Package",
              "targets": [{"os": "default", "uri": "${{ needs.create-release.outputs.release-url }}"}]
            }]
          }' "${{ env.RELEASE_WEBHOOK }}" || echo "Failed to send webhook"

      - name: üìä Update repository topics
        uses: actions/github-script@v7
        with:
          script: |
            const topics = [
              'istio', 'kubernetes', 'azure', 'aks', 'service-mesh',
              'templates', 'gitops', 'devops', 'infrastructure-as-code'
            ];
            
            await github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: topics
            });

      - name: üìã Create release summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # üö¢ Release Summary
          
          ## ‚úÖ Release Completed Successfully!
          
          **Version**: v${{ needs.analyze-changes.outputs.next-version }}  
          **Release Type**: ${{ needs.analyze-changes.outputs.release-type }}  
          **Release URL**: ${{ needs.create-release.outputs.release-url }}
          
          ## üì¶ What Was Released
          
          - ‚úÖ GitHub Release created
          - ‚úÖ Release assets uploaded
          - $([ "${{ needs.publish-packages.result }}" == "success" ] && echo "‚úÖ OCI packages published" || echo "‚ö†Ô∏è Package publishing failed")
          - ‚úÖ Notifications sent
          
          ## üîó Resources
          
          - **Release Page**: [${{ needs.create-release.outputs.release-tag }}](${{ needs.create-release.outputs.release-url }})
          - **Package Registry**: [\`${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }}\`](https://${{ env.REGISTRY_URL }}/${{ github.repository_owner }}/${{ env.PACKAGE_NAME }})
          - **Documentation**: [README.md](./README.md)
          
          ## üìã Next Steps
          
          - [ ] Update deployment documentation
          - [ ] Notify team members
          - [ ] Plan next iteration
          - [ ] Update production environments
          EOF

      - name: ‚ùå Handle release failure
        if: failure()
        run: |
          echo "‚ùå Release process failed - creating rollback information"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ‚ùå Release Failed
          
          The release process encountered an error. Please check the logs and consider:
          
          1. **Manual Release**: Create the release manually if needed
          2. **Rollback**: Revert any version updates if necessary
          3. **Investigation**: Review failed steps and fix issues
          4. **Retry**: Re-run the workflow after fixes
          
          ## üìã Failed Steps
          
          - Pre-validation: ${{ needs.pre-release-validation.result }}
          - Release Creation: ${{ needs.create-release.result }}  
          - Package Publishing: ${{ needs.publish-packages.result }}
          EOF