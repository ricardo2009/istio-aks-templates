# =============================================================================
# OVERLAY DE STAGING - values.yaml
# =============================================================================
# Este overlay sobrescreve valores específicos para o ambiente de staging
# Ambiente que simula produção para testes finais

global:
  environment: "staging"
  version: "1.0.0-rc"
  debug: false
  managedBy: "qa-team"

# =============================================================================
# CONFIGURAÇÃO DE TRAFFIC MANAGEMENT - STAGING
# =============================================================================
trafficManagement:
  gateway:
    instances:
      main-gateway:
        hosts:
          - "staging-api.company.com"
          - "staging.company.com"
        tls:
          mode: "SIMPLE"
          credentialName: "staging-tls-cert"
          
      internal-gateway:
        enabled: true
        hosts:
          - "internal-staging.company.com"

  virtualService:
    instances:
      main-vs:
        hosts:
          - "staging-api.company.com"
          - "staging.company.com"
        
        routes:
          main:
            destination:
              service: "frontend-service"
              port: 8080
              subset: "stable"
            weight: 90  # Permite testes de canary
            canaryDestination:
              subset: "canary"
              weight: 10  # 10% canary para validação
            timeout: "45s"
            
            retries:
              attempts: 3
              perTryTimeout: "15s"
              
          api:
            destination:
              service: "api-service"
              port: 8080
              subset: "stable"
            weight: 80
            canaryDestination:
              subset: "canary"
              weight: 20  # Mais canary em staging
            timeout: "60s"
            
            retries:
              attempts: 3
              
        # Fault injection controlado para testes
        faultInjection:
          delay:
            percentage: 0.1  # Minimal para teste de resilência
            fixedDelay: "2s"
          abort:
            percentage: 0.05
            httpStatus: 503
            
        # Traffic mirroring para ambiente de teste
        trafficMirroring:
          destination:
            service: "test-mirror-service"
            port: 8080
            subset: "mirror"
          percentage: 5.0  # 5% para análise

  destinationRule:
    instances:
      main-dr:
        trafficPolicy:
          connectionPool:
            tcp:
              maxConnections: 25
              connectTimeout: "5s"
            http:
              http1MaxPendingRequests: 25
              http2MaxRequests: 500
              maxRequestsPerConnection: 10
              
          outlierDetection:
            consecutiveGatewayErrors: 5
            consecutive5xxErrors: 5
            interval: "30s"
            baseEjectionTime: "30s"
            maxEjectionPercent: 20
            
          loadBalancer:
            simple: "LEAST_CONN"
            
        subsets:
          stable:
            name: "stable"
            labels:
              version: "v1.0.0-rc"
              environment: "staging"
          canary:
            name: "canary"
            labels:
              version: "v1.1.0-rc"
              environment: "staging"

# =============================================================================
# CONFIGURAÇÃO DE SEGURANÇA - STAGING
# =============================================================================
security:
  peerAuthentication:
    instances:
      default-pa:
        mtls:
          mode: "STRICT"  # Simular produção
          
  authorizationPolicy:
    instances:
      default-deny:
        enabled: false  # Mais permissivo que prod para testes
        
      allow-all:
        enabled: false
        
      api-policy:
        rules:
          - from:
            - source:
                principals: ["cluster.local/ns/staging/sa/frontend"]
                namespaces: ["staging", "qa-tools"]
            to:
            - operation:
                methods: ["GET", "POST", "PUT"]
                paths: ["/api/v1/*", "/api/v2/*"]
              
      qa-policy:
        enabled: true
        rules:
          - from:
            - source:
                principals: ["cluster.local/ns/qa-tools/sa/automation"]
            to:
            - operation:
                methods: ["GET", "POST", "PUT", "DELETE"]
            when:
            - key: "request.headers[x-qa-token]"
              values: ["staging-qa-token"]

# =============================================================================
# CONFIGURAÇÃO DE OBSERVABILIDADE - STAGING
# =============================================================================
observability:
  telemetry:
    instances:
      default-metrics:
        providers:
          - name: "prometheus"
        tags:
          environment: "staging"
          team: "qa"
          version: "1.0.0-rc"
          
      tracing:
        enabled: true
        providers:
          - name: "jaeger"
        sampling: 10.0  # 10% sampling para análise
        
      access-logs:
        enabled: true
        providers:
          - name: "otel"
        format: "json"
        includeHeaders: true  # Headers para debugging

# =============================================================================
# CONFIGURAÇÃO DE RESILÊNCIA - STAGING
# =============================================================================
resilience:
  serviceEntry:
    instances:
      external-api-staging:
        hosts:
          - "api-staging.external.com"
        ports:
          - number: 443
            name: "https"
            protocol: "HTTPS"
        location: "MESH_EXTERNAL"
        
      mock-services:
        hosts:
          - "mock-api.qa-tools.com"
        ports:
          - number: 80
            name: "http"
            protocol: "HTTP"
        location: "MESH_EXTERNAL"
        
  workloadEntry:
    instances:
      legacy-staging:
        address: "10.2.1.100"  # IP staging do sistema legado
        ports:
          - number: 8080
            name: "http"

# =============================================================================
# CONFIGURAÇÃO DE POLÍTICAS - STAGING
# =============================================================================
policiesGovernance:
  requestAuthentication:
    instances:
      jwt-auth:
        issuer: "https://auth-staging.company.com"
        audiences:
          - "staging-api.company.com"
        jwksUri: "https://auth-staging.company.com/.well-known/jwks.json"
        
  envoyFilter:
    instances:
      test-headers:
        enabled: true
        configPatches:
          - applyTo: "HTTP_FILTER"
            match:
              context: "SIDECAR_INBOUND"
            patch:
              operation: "INSERT_BEFORE"
              value:
                name: "envoy.filters.http.header_to_metadata"
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.HeaderToMetadata"
                  request_rules:
                    - header: "x-test-scenario"
                      on_header_present:
                        metadata_namespace: "testing"
                        key: "scenario"
                        value: "%{DEFAULT(unknown)}"
                        
      rate-limiting:
        enabled: true
        configPatches:
          - applyTo: "HTTP_FILTER"
            match:
              context: "SIDECAR_INBOUND"
            patch:
              operation: "INSERT_BEFORE"
              value:
                name: "envoy.filters.http.local_ratelimit"
                typed_config:
                  "@type": "type.googleapis.com/udpa.type.v1.TypedStruct"
                  type_url: "type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit"
                  value:
                    stat_prefix: "local_rate_limiter"
                    token_bucket:
                      max_tokens: 500
                      tokens_per_fill: 50
                      fill_interval: "1s"

# =============================================================================
# CONFIGURAÇÃO DE EXTENSIBILIDADE - STAGING
# =============================================================================
extensibility:
  wasmPlugin:
    instances:
      test-plugin:
        enabled: true
        url: "oci://staging-registry.company.com/wasm/test-plugin:latest"
        configuration:
          logLevel: "info"
          enableMocking: true
          
      performance-test:
        enabled: true
        url: "oci://staging-registry.company.com/wasm/perf-test:latest"
        configuration:
          sampleRate: 1.0  # 100% para testes de performance
          
  telemetryV2:
    instances:
      staging-metrics:
        enabled: true
        providers:
          - name: "prometheus"
        tags:
          test_run_id: "request.headers['x-test-run-id']"
          qa_environment: "request.headers['x-qa-env']"
          test_scenario: "request.headers['x-test-scenario']"

# =============================================================================
# CONFIGURAÇÃO ADICIONAL - STAGING
# =============================================================================
additionalFeatures:
  rateLimiting:
    instances:
      staging-limits:
        enabled: true
        descriptors:
          - entries:
              - key: "generic_key"
                value: "staging_calls"
            rateLimit:
              requestsPerUnit: 500
              unit: "MINUTE"
              
      qa-limits:
        enabled: true
        descriptors:
          - entries:
              - key: "header_match"
                value: "x-qa-user"
            rateLimit:
              requestsPerUnit: 1000  # Mais permissivo para QA
              unit: "MINUTE"
            
  circuitBreaker:
    instances:
      staging-breaker:
        consecutiveErrors: 3  # Mais sensível para detectar problemas
        timeout: "15s"
        maxConnections: 50
        maxPendingRequests: 25