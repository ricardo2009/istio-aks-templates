#!/bin/bash

# Script de Valida√ß√£o Completa - Istio Templates e Aplica√ß√£o Demo
# Testa todos os templates, manifests e configura√ß√µes

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configura√ß√µes
NAMESPACE="ecommerce-demo"
DOMAIN="ecommerce-demo.example.com"
OUTPUT_DIR="validation-output"

# Fun√ß√£o para imprimir cabe√ßalhos
print_header() {
    echo -e "\n${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${WHITE}                    $1${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
}

# Fun√ß√£o para imprimir se√ß√µes
print_section() {
    echo -e "\n${CYAN}‚ñ∂ $1${NC}"
    echo -e "${CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
}

# Fun√ß√£o para verificar se o comando foi executado com sucesso
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Falha: $1${NC}"
        return 1
    fi
}

# Fun√ß√£o para validar YAML
validate_yaml() {
    local file=$1
    local name=$2
    
    if command -v yq >/dev/null 2>&1; then
        yq eval '.' "$file" >/dev/null 2>&1
        check_success "YAML v√°lido: $name"
    elif python3 -c "import yaml" >/dev/null 2>&1; then
        python3 -c "
import yaml
import sys
try:
    with open('$file', 'r') as f:
        yaml.safe_load_all(f)
    print('YAML v√°lido')
except Exception as e:
    print(f'YAML inv√°lido: {e}')
    sys.exit(1)
" >/dev/null 2>&1
        check_success "YAML v√°lido: $name"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Validador YAML n√£o dispon√≠vel, pulando valida√ß√£o de $name${NC}"
    fi
}

# Fun√ß√£o para testar conectividade com cluster
test_cluster_connectivity() {
    print_section "üîç Testando Conectividade com Cluster"
    
    if kubectl cluster-info >/dev/null 2>&1; then
        check_success "Conectividade com cluster AKS"
        
        # Verificar se Istio est√° instalado
        if kubectl get namespace aks-istio-system >/dev/null 2>&1; then
            check_success "Istio gerenciado detectado"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Istio gerenciado n√£o detectado${NC}"
        fi
        
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Sem conectividade com cluster - executando valida√ß√£o offline${NC}"
        return 1
    fi
}

# Fun√ß√£o principal de valida√ß√£o
main_validation() {
    clear
    print_header "üß™ VALIDA√á√ÉO COMPLETA - ISTIO AKS TEMPLATES"
    
    echo -e "${WHITE}Iniciando valida√ß√£o completa de todos os componentes...${NC}"
    
    # Criar diret√≥rio de sa√≠da
    mkdir -p "$OUTPUT_DIR"
    
    # 1. Testar conectividade
    CLUSTER_AVAILABLE=false
    if test_cluster_connectivity; then
        CLUSTER_AVAILABLE=true
    fi
    
    # 2. Validar Templates B√°sicos
    print_section "üìù Validando Templates B√°sicos"
    
    echo -e "${BLUE}Testando Gateway b√°sico...${NC}"
    ./scripts/render.sh -f templates/base/gateway.yaml -s test-service -n test-ns -h test.example.com --tls-secret test-tls
    validate_yaml "manifests/test-service/gateway.yaml" "Gateway b√°sico"
    
    echo -e "${BLUE}Testando VirtualService b√°sico...${NC}"
    ./scripts/render.sh -f templates/base/virtual-service.yaml -s test-service -n test-ns -h test.example.com
    validate_yaml "manifests/test-service/virtual-service.yaml" "VirtualService b√°sico"
    
    echo -e "${BLUE}Testando DestinationRule b√°sico...${NC}"
    ./scripts/render.sh -f templates/traffic-management/destination-rule.yaml -s test-service -n test-ns
    validate_yaml "manifests/test-service/destination-rule.yaml" "DestinationRule b√°sico"
    
    # 3. Validar Templates Avan√ßados
    print_section "üöÄ Validando Templates Avan√ßados"
    
    echo -e "${BLUE}Testando Gateway avan√ßado...${NC}"
    ./scripts/render.sh -f templates/base/advanced-gateway.yaml -s payment-service -n ecommerce -h payment.example.com --tls-secret payment-tls
    validate_yaml "manifests/payment-service/advanced-gateway.yaml" "Gateway avan√ßado"
    
    echo -e "${BLUE}Testando DestinationRule avan√ßado...${NC}"
    ./scripts/render.sh -f templates/traffic-management/advanced-destination-rule.yaml -s payment-service -n ecommerce --max-connections 50 --consecutive-5xx-errors 3
    validate_yaml "manifests/payment-service/advanced-destination-rule.yaml" "DestinationRule avan√ßado"
    
    echo -e "${BLUE}Testando VirtualService avan√ßado...${NC}"
    ./scripts/render.sh -f templates/traffic-management/advanced-virtual-service.yaml -s order-service -n ecommerce -h order.example.com
    validate_yaml "manifests/order-service/advanced-virtual-service.yaml" "VirtualService avan√ßado"
    
    # 4. Validar Templates de Seguran√ßa
    print_section "üîí Validando Templates de Seguran√ßa"
    
    echo -e "${BLUE}Testando PeerAuthentication...${NC}"
    ./scripts/render.sh -f templates/security/peer-authentication.yaml -s test-service -n test-ns
    validate_yaml "manifests/test-service/peer-authentication.yaml" "PeerAuthentication"
    
    echo -e "${BLUE}Testando AuthorizationPolicy...${NC}"
    ./scripts/render.sh -f templates/security/authorization-policy.yaml -s test-service -n test-ns --caller-sa frontend --method GET --path "/api/test"
    validate_yaml "manifests/test-service/authorization-policy.yaml" "AuthorizationPolicy"
    
    echo -e "${BLUE}Testando Namespace Security Policy...${NC}"
    ./scripts/render.sh -f templates/security/namespace-security-policy.yaml -s test-service -n test-ns
    validate_yaml "manifests/test-service/namespace-security-policy.yaml" "Namespace Security Policy"
    
    # 5. Validar Templates de Observabilidade
    print_section "üìä Validando Templates de Observabilidade"
    
    echo -e "${BLUE}Testando Telemetry b√°sico...${NC}"
    ./scripts/render.sh -f templates/observability/telemetry.yaml -s test-service -n test-ns
    validate_yaml "manifests/test-service/telemetry.yaml" "Telemetry b√°sico"
    
    echo -e "${BLUE}Testando Telemetry avan√ßado...${NC}"
    ./scripts/render.sh -f templates/observability/advanced-telemetry.yaml -s test-service -n test-ns
    validate_yaml "manifests/test-service/advanced-telemetry.yaml" "Telemetry avan√ßado"
    
    # 6. Validar Manifestos da Aplica√ß√£o Demo
    print_section "üõçÔ∏è Validando Aplica√ß√£o E-commerce Demo"
    
    echo -e "${BLUE}Validando namespace...${NC}"
    validate_yaml "demo-app/k8s-manifests/namespace.yaml" "Namespace"
    
    echo -e "${BLUE}Validando frontend...${NC}"
    validate_yaml "demo-app/k8s-manifests/frontend.yaml" "Frontend"
    
    echo -e "${BLUE}Validando API gateway...${NC}"
    validate_yaml "demo-app/k8s-manifests/api-gateway.yaml" "API Gateway"
    
    echo -e "${BLUE}Validando backend services...${NC}"
    validate_yaml "demo-app/k8s-manifests/backend-services.yaml" "Backend Services"
    
    # 7. Gerar Configura√ß√£o Completa da Demo
    print_section "üéØ Gerando Configura√ß√£o Completa da Demo"
    
    services=("frontend" "api-gateway" "user-service" "order-service" "payment-service" "notification-service")
    
    for service in "${services[@]}"; do
        echo -e "${BLUE}Gerando configura√ß√£o Istio para $service...${NC}"
        
        # Gateway (apenas para frontend)
        if [ "$service" = "frontend" ]; then
            ./scripts/render.sh -f templates/base/advanced-gateway.yaml -s "$service" -n "$NAMESPACE" -h "$DOMAIN" --tls-secret ecommerce-tls -o "$OUTPUT_DIR"
        fi
        
        # VirtualService
        ./scripts/render.sh -f templates/traffic-management/advanced-virtual-service.yaml -s "$service" -n "$NAMESPACE" -h "$DOMAIN" -o "$OUTPUT_DIR"
        
        # DestinationRule
        if [ "$service" = "payment-service" ]; then
            # Payment service com configura√ß√µes mais restritivas
            ./scripts/render.sh -f templates/traffic-management/advanced-destination-rule.yaml -s "$service" -n "$NAMESPACE" --max-connections 30 --consecutive-5xx-errors 3 --base-ejection-time 60s -o "$OUTPUT_DIR"
        else
            ./scripts/render.sh -f templates/traffic-management/advanced-destination-rule.yaml -s "$service" -n "$NAMESPACE" -o "$OUTPUT_DIR"
        fi
        
        # PeerAuthentication
        ./scripts/render.sh -f templates/security/peer-authentication.yaml -s "$service" -n "$NAMESPACE" -o "$OUTPUT_DIR"
        
        # AuthorizationPolicy
        ./scripts/render.sh -f templates/security/authorization-policy.yaml -s "$service" -n "$NAMESPACE" --caller-sa api-gateway --method GET --path "/" -o "$OUTPUT_DIR"
        
        # Telemetry
        ./scripts/render.sh -f templates/observability/advanced-telemetry.yaml -s "$service" -n "$NAMESPACE" -o "$OUTPUT_DIR"
        
        check_success "Configura√ß√£o gerada para $service"
    done
    
    # 8. Gerar Pol√≠ticas de Namespace
    print_section "üõ°Ô∏è Gerando Pol√≠ticas de Namespace"
    
    ./scripts/render.sh -f templates/security/namespace-security-policy.yaml -s ecommerce -n "$NAMESPACE" -o "$OUTPUT_DIR"
    check_success "Pol√≠ticas de namespace geradas"
    
    # 9. Testar no Cluster (se dispon√≠vel)
    if [ "$CLUSTER_AVAILABLE" = true ]; then
        print_section "üöÄ Testando no Cluster AKS"
        
        echo -e "${BLUE}Aplicando namespace...${NC}"
        kubectl apply -f demo-app/k8s-manifests/namespace.yaml --dry-run=client
        check_success "Namespace v√°lido para aplica√ß√£o"
        
        echo -e "${BLUE}Validando manifestos Kubernetes...${NC}"
        kubectl apply -f demo-app/k8s-manifests/ --dry-run=client >/dev/null 2>&1
        check_success "Todos os manifestos Kubernetes s√£o v√°lidos"
        
        echo -e "${BLUE}Validando configura√ß√µes Istio...${NC}"
        for file in "$OUTPUT_DIR"/*/*.yaml; do
            if [ -f "$file" ]; then
                kubectl apply -f "$file" --dry-run=client >/dev/null 2>&1
                check_success "Configura√ß√£o Istio v√°lida: $(basename "$file")"
            fi
        done
    fi
    
    # 10. Gerar Relat√≥rio de Valida√ß√£o
    print_section "üìã Gerando Relat√≥rio de Valida√ß√£o"
    
    cat > "$OUTPUT_DIR/validation-report.md" << EOF
# Relat√≥rio de Valida√ß√£o - Istio AKS Templates

**Data:** $(date)
**Cluster:** ${CLUSTER_AVAILABLE}

## ‚úÖ Templates Validados

### Templates B√°sicos
- ‚úÖ Gateway b√°sico
- ‚úÖ VirtualService b√°sico  
- ‚úÖ DestinationRule b√°sico

### Templates Avan√ßados
- ‚úÖ Gateway avan√ßado com TLS 1.3
- ‚úÖ DestinationRule com circuit breakers
- ‚úÖ VirtualService com canary routing

### Templates de Seguran√ßa
- ‚úÖ PeerAuthentication (mTLS STRICT)
- ‚úÖ AuthorizationPolicy (Zero Trust)
- ‚úÖ Namespace Security Policy

### Templates de Observabilidade
- ‚úÖ Telemetry b√°sico
- ‚úÖ Telemetry avan√ßado com custom metrics

## üõçÔ∏è Aplica√ß√£o E-commerce Demo

### Manifestos Kubernetes
- ‚úÖ Namespace com Istio injection
- ‚úÖ Frontend (React SPA simulado)
- ‚úÖ API Gateway (NGINX)
- ‚úÖ User Service
- ‚úÖ Order Service  
- ‚úÖ Payment Service
- ‚úÖ Notification Service

### Configura√ß√µes Istio Geradas
$(find "$OUTPUT_DIR" -name "*.yaml" | wc -l) arquivos de configura√ß√£o gerados

## üéØ Pr√≥ximos Passos

1. **Deploy Manual**: Execute os comandos no README para deploy manual
2. **GitHub Actions**: Use os workflows para deploy automatizado
3. **Demonstra√ß√£o**: Execute o script de apresenta√ß√£o
4. **Monitoramento**: Configure dashboards no Grafana

## üìä Estat√≠sticas

- **Templates testados:** $(find templates -name "*.yaml" | wc -l)
- **Configura√ß√µes geradas:** $(find "$OUTPUT_DIR" -name "*.yaml" | wc -l)
- **Servi√ßos da demo:** 6
- **Pol√≠ticas de seguran√ßa:** 7
- **Configura√ß√µes de resili√™ncia:** 6

EOF

    check_success "Relat√≥rio de valida√ß√£o gerado"
    
    # Conclus√£o
    print_header "üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO"
    
    echo -e "${GREEN}‚úÖ Todos os templates foram validados com sucesso${NC}"
    echo -e "${GREEN}‚úÖ Aplica√ß√£o de demonstra√ß√£o est√° pronta${NC}"
    echo -e "${GREEN}‚úÖ Configura√ß√µes Istio foram geradas${NC}"
    echo -e "${GREEN}‚úÖ Relat√≥rio de valida√ß√£o criado${NC}"
    
    echo -e "\n${CYAN}üìÅ Arquivos gerados em: $OUTPUT_DIR/${NC}"
    echo -e "${CYAN}üìã Relat√≥rio completo: $OUTPUT_DIR/validation-report.md${NC}"
    
    if [ "$CLUSTER_AVAILABLE" = true ]; then
        echo -e "\n${YELLOW}üöÄ Para aplicar no cluster:${NC}"
        echo -e "${WHITE}kubectl apply -f demo-app/k8s-manifests/${NC}"
        echo -e "${WHITE}kubectl apply -f $OUTPUT_DIR/ecommerce/${NC}"
    else
        echo -e "\n${YELLOW}‚ö†Ô∏è  Para testar no cluster, configure o kubectl e execute novamente${NC}"
    fi
    
    echo -e "\n${PURPLE}üé™ Para executar a demonstra√ß√£o:${NC}"
    echo -e "${WHITE}./scripts/demo-presentation.sh${NC}"
}

# Executar valida√ß√£o
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main_validation
fi
