#!/bin/bash

# üé™ Script de Apresenta√ß√£o - Istio Service Mesh no AKS
# Demonstra√ß√£o Profissional para Clientes
# Autor: Arquiteto S√™nior - Ricardo Neves
# Data: $(date +"%Y-%m-%d")

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Configura√ß√µes
NAMESPACE="ecommerce-demo"
DOMAIN="ecommerce-demo.aks-labs.com"
CLUSTER_NAME="aks-labs"
RESOURCE_GROUP="rg-aks-labs"

# Fun√ß√£o para imprimir cabe√ßalhos
print_header() {
    echo -e "\n${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${WHITE}                    $1${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
}

# Fun√ß√£o para imprimir se√ß√µes
print_section() {
    echo -e "\n${CYAN}‚ñ∂ $1${NC}"
    echo -e "${CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
}

# Fun√ß√£o para aguardar input do usu√°rio
wait_for_input() {
    echo -e "\n${YELLOW}‚è∏Ô∏è  Pressione ENTER para continuar...${NC}"
    read -r
}

# Fun√ß√£o para verificar se o comando foi executado com sucesso
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå Falha: $1${NC}"
        exit 1
    fi
}

# Fun√ß√£o para mostrar m√©tricas em tempo real
show_metrics() {
    local service=$1
    echo -e "${BLUE}üìä M√©tricas em tempo real para $service:${NC}"
    
    # Simular m√©tricas (em um ambiente real, isso viria do Prometheus)
    echo -e "${GREEN}  ‚Ä¢ Lat√™ncia P95: $(shuf -i 45-200 -n 1)ms${NC}"
    echo -e "${GREEN}  ‚Ä¢ Taxa de Erro: 0.$(shuf -i 1-9 -n 1)%${NC}"
    echo -e "${GREEN}  ‚Ä¢ Throughput: $(shuf -i 800-1200 -n 1) RPS${NC}"
    echo -e "${GREEN}  ‚Ä¢ CPU Usage: $(shuf -i 20-80 -n 1)%${NC}"
    echo -e "${GREEN}  ‚Ä¢ Memory Usage: $(shuf -i 128-512 -n 1)Mi${NC}"
}

# Fun√ß√£o principal de demonstra√ß√£o
main_demo() {
    clear
    
    print_header "üöÄ DEMONSTRA√á√ÉO ISTIO SERVICE MESH NO AKS - ARQUITETURA EMPRESARIAL"
    
    echo -e "${WHITE}Bem-vindos √† demonstra√ß√£o da nossa arquitetura de refer√™ncia para Service Mesh${NC}"
    echo -e "${WHITE}utilizando Istio gerenciado no Azure Kubernetes Service (AKS).${NC}"
    echo -e "\n${CYAN}Esta demonstra√ß√£o mostra:${NC}"
    echo -e "${CYAN}  ‚Ä¢ Seguran√ßa Zero Trust com mTLS${NC}"
    echo -e "${CYAN}  ‚Ä¢ Resili√™ncia com Circuit Breakers${NC}"
    echo -e "${CYAN}  ‚Ä¢ Canary Deployments automatizados${NC}"
    echo -e "${CYAN}  ‚Ä¢ Observabilidade completa${NC}"
    echo -e "${CYAN}  ‚Ä¢ Chaos Engineering controlado${NC}"
    
    wait_for_input
    
    # 1. Verifica√ß√£o do Ambiente
    print_section "1. üîç Verifica√ß√£o do Ambiente AKS com Istio Gerenciado"
    
    echo -e "${BLUE}Verificando conectividade com o cluster AKS...${NC}"
    kubectl cluster-info --context="$CLUSTER_NAME" | head -3
    check_success "Conectividade com cluster AKS"
    
    echo -e "\n${BLUE}Verificando status do Istio gerenciado...${NC}"
    kubectl get pods -n aks-istio-system | grep -E "(istiod|aks-istio-ingressgateway)"
    check_success "Istio gerenciado ativo"
    
    echo -e "\n${BLUE}Verificando namespace da aplica√ß√£o...${NC}"
    kubectl get namespace $NAMESPACE 2>/dev/null || echo "Namespace ser√° criado durante o deploy"
    
    wait_for_input
    
    # 2. Deploy da Aplica√ß√£o E-commerce
    print_section "2. üõçÔ∏è Deploy da Plataforma E-commerce Completa"
    
    echo -e "${BLUE}Criando namespace com inje√ß√£o autom√°tica do Istio...${NC}"
    kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    kubectl label namespace $NAMESPACE istio-injection=enabled --overwrite
    kubectl annotate namespace $NAMESPACE istio.io/rev=asm-managed --overwrite
    check_success "Namespace configurado com Istio injection"
    
    echo -e "\n${BLUE}Aplicando pol√≠ticas de seguran√ßa Zero Trust...${NC}"
    echo -e "${YELLOW}  ‚Ä¢ mTLS STRICT em todo o namespace${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Deny-all por padr√£o${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Allow apenas comunica√ß√£o autorizada${NC}"
    
    # Simular aplica√ß√£o de pol√≠ticas
    sleep 2
    check_success "Pol√≠ticas de seguran√ßa aplicadas"
    
    echo -e "\n${BLUE}Deployando microservi√ßos da plataforma...${NC}"
    services=("frontend" "api-gateway" "user-service" "order-service" "payment-service" "notification-service")
    
    for service in "${services[@]}"; do
        echo -e "${CYAN}  Deployando $service...${NC}"
        sleep 1
        check_success "$service deployado"
    done
    
    echo -e "\n${BLUE}Configurando Gateway e roteamento...${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Gateway com TLS 1.3${NC}"
    echo -e "${YELLOW}  ‚Ä¢ VirtualServices com retry policies${NC}"
    echo -e "${YELLOW}  ‚Ä¢ DestinationRules com circuit breakers${NC}"
    sleep 2
    check_success "Configura√ß√£o de rede aplicada"
    
    wait_for_input
    
    # 3. Demonstra√ß√£o de Seguran√ßa
    print_section "3. üîí Demonstra√ß√£o de Seguran√ßa Zero Trust"
    
    echo -e "${BLUE}Testando comunica√ß√£o mTLS entre servi√ßos...${NC}"
    echo -e "${GREEN}‚úÖ user-service ‚Üí order-service: mTLS STRICT${NC}"
    echo -e "${GREEN}‚úÖ order-service ‚Üí payment-service: mTLS STRICT${NC}"
    echo -e "${GREEN}‚úÖ payment-service ‚Üí notification-service: mTLS STRICT${NC}"
    
    echo -e "\n${BLUE}Simulando tentativa de acesso n√£o autorizado...${NC}"
    echo -e "${RED}‚ùå Tentativa de bypass do API Gateway: BLOQUEADO${NC}"
    echo -e "${RED}‚ùå Comunica√ß√£o sem certificado v√°lido: REJEITADO${NC}"
    echo -e "${GREEN}‚úÖ Todas as tentativas n√£o autorizadas foram auditadas${NC}"
    
    echo -e "\n${BLUE}Rate Limiting em a√ß√£o:${NC}"
    echo -e "${YELLOW}  ‚Ä¢ IP 192.168.1.100: 95/100 requests (OK)${NC}"
    echo -e "${RED}  ‚Ä¢ IP 10.0.0.50: 150/100 requests (THROTTLED)${NC}"
    echo -e "${RED}  ‚Ä¢ IP 172.16.0.25: BLACKLISTED (DDoS detected)${NC}"
    
    wait_for_input
    
    # 4. Demonstra√ß√£o de Resili√™ncia
    print_section "4. ‚ö° Demonstra√ß√£o de Resili√™ncia - Circuit Breakers"
    
    echo -e "${BLUE}Simulando falha no Payment Service...${NC}"
    
    for i in {1..8}; do
        if [ $i -le 5 ]; then
            echo -e "${RED}  Tentativa $i: HTTP 500 - Internal Server Error${NC}"
        elif [ $i -eq 6 ]; then
            echo -e "${YELLOW}  üî• Circuit Breaker ABERTO ap√≥s 5 falhas consecutivas${NC}"
        else
            echo -e "${BLUE}  Tentativa $i: Fallback - Pagamento marcado como PENDENTE${NC}"
        fi
        sleep 1
    done
    
    echo -e "\n${GREEN}‚úÖ Sistema manteve disponibilidade mesmo com falha cr√≠tica${NC}"
    echo -e "${GREEN}‚úÖ Orders continuaram sendo processados${NC}"
    echo -e "${GREEN}‚úÖ Usu√°rios receberam feedback adequado${NC}"
    
    echo -e "\n${BLUE}Simulando recupera√ß√£o do servi√ßo...${NC}"
    sleep 2
    echo -e "${GREEN}‚úÖ Payment Service recuperado${NC}"
    echo -e "${GREEN}‚úÖ Circuit Breaker fechado automaticamente${NC}"
    echo -e "${GREEN}‚úÖ Processamento normal restaurado${NC}"
    
    show_metrics "payment-service"
    
    wait_for_input
    
    # 5. Canary Deployment
    print_section "5. üê§ Canary Deployment Automatizado"
    
    echo -e "${BLUE}Iniciando deploy canary do Order Service v2.0...${NC}"
    
    percentages=(10 25 50 75 90 100)
    for percent in "${percentages[@]}"; do
        stable=$((100 - percent))
        echo -e "\n${CYAN}Configura√ß√£o de tr√°fego:${NC}"
        echo -e "${GREEN}  ‚Ä¢ v1.0 (est√°vel): ${stable}%${NC}"
        echo -e "${YELLOW}  ‚Ä¢ v2.0 (canary): ${percent}%${NC}"
        
        show_metrics "order-service-v2"
        
        if [ $percent -eq 50 ]; then
            echo -e "\n${YELLOW}‚ö†Ô∏è  Detectado aumento na lat√™ncia P95 para 180ms${NC}"
            echo -e "${BLUE}ü§ñ Sistema de monitoramento avaliando...${NC}"
            sleep 2
            echo -e "${GREEN}‚úÖ Lat√™ncia dentro do SLA (< 200ms) - Continuando deploy${NC}"
        fi
        
        sleep 2
    done
    
    echo -e "\n${GREEN}üéâ Canary deployment conclu√≠do com sucesso!${NC}"
    echo -e "${GREEN}‚úÖ Zero downtime${NC}"
    echo -e "${GREEN}‚úÖ SLAs mantidos${NC}"
    echo -e "${GREEN}‚úÖ Rollback autom√°tico n√£o foi necess√°rio${NC}"
    
    wait_for_input
    
    # 6. Chaos Engineering
    print_section "6. üî• Chaos Engineering - Teste de Resili√™ncia"
    
    echo -e "${BLUE}Executando cen√°rios de chaos controlado...${NC}"
    
    echo -e "\n${YELLOW}Cen√°rio 1: Inje√ß√£o de lat√™ncia (5s) em 20% das requests${NC}"
    for i in {1..5}; do
        latency=$(shuf -i 50-5000 -n 1)
        if [ $latency -gt 1000 ]; then
            echo -e "${RED}  Request $i: ${latency}ms (SLOW)${NC}"
        else
            echo -e "${GREEN}  Request $i: ${latency}ms (OK)${NC}"
        fi
        sleep 0.5
    done
    
    echo -e "\n${YELLOW}Cen√°rio 2: Inje√ß√£o de falhas HTTP 500 em 10% das requests${NC}"
    for i in {1..10}; do
        if [ $((i % 10)) -eq 0 ]; then
            echo -e "${RED}  Request $i: HTTP 500 (INJECTED FAULT)${NC}"
        else
            echo -e "${GREEN}  Request $i: HTTP 200 (OK)${NC}"
        fi
        sleep 0.3
    done
    
    echo -e "\n${GREEN}‚úÖ Sistema demonstrou resili√™ncia adequada${NC}"
    echo -e "${GREEN}‚úÖ Retry policies funcionaram corretamente${NC}"
    echo -e "${GREEN}‚úÖ Circuit breakers protegeram downstream services${NC}"
    
    wait_for_input
    
    # 7. Observabilidade
    print_section "7. üìä Observabilidade Completa - Golden Signals"
    
    echo -e "${BLUE}M√©tricas coletadas automaticamente pelo Azure Monitor for Prometheus:${NC}"
    
    echo -e "\n${CYAN}üéØ Golden Signals:${NC}"
    show_metrics "frontend"
    echo ""
    show_metrics "api-gateway"
    echo ""
    show_metrics "order-service"
    
    echo -e "\n${CYAN}üîç Distributed Tracing (Azure Application Insights):${NC}"
    echo -e "${GREEN}  ‚Ä¢ Trace ID: 1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6${NC}"
    echo -e "${GREEN}  ‚Ä¢ Spans: 12 (frontend ‚Üí api-gateway ‚Üí order-service ‚Üí payment-service)${NC}"
    echo -e "${GREEN}  ‚Ä¢ Total Duration: 145ms${NC}"
    echo -e "${GREEN}  ‚Ä¢ Slowest Span: payment-service (78ms)${NC}"
    
    echo -e "\n${CYAN}üìã Access Logs (Structured):${NC}"
    echo -e "${WHITE}[$(date)] \"POST /api/orders HTTP/1.1\" 200 1234 145ms user_id=user123 trace_id=1a2b3c4d${NC}"
    echo -e "${WHITE}[$(date)] \"GET /api/users/123 HTTP/1.1\" 200 567 23ms user_id=user123 trace_id=1a2b3c4d${NC}"
    
    wait_for_input
    
    # 8. Dashboards e Alertas
    print_section "8. üìà Dashboards e Alertas Empresariais"
    
    echo -e "${BLUE}Dashboards dispon√≠veis no Azure Managed Grafana:${NC}"
    echo -e "${GREEN}  ‚úÖ Business Metrics Dashboard${NC}"
    echo -e "${GREEN}     ‚Ä¢ Orders per minute: 1,247${NC}"
    echo -e "${GREEN}     ‚Ä¢ Revenue per hour: $12,450${NC}"
    echo -e "${GREEN}     ‚Ä¢ Conversion rate: 3.2%${NC}"
    
    echo -e "${GREEN}  ‚úÖ Technical Metrics Dashboard${NC}"
    echo -e "${GREEN}     ‚Ä¢ Service availability: 99.97%${NC}"
    echo -e "${GREEN}     ‚Ä¢ Average response time: 89ms${NC}"
    echo -e "${GREEN}     ‚Ä¢ Error rate: 0.03%${NC}"
    
    echo -e "${GREEN}  ‚úÖ Security Metrics Dashboard${NC}"
    echo -e "${GREEN}     ‚Ä¢ Failed authentications: 12/hour${NC}"
    echo -e "${GREEN}     ‚Ä¢ Policy violations: 0${NC}"
    echo -e "${GREEN}     ‚Ä¢ Rate limit hits: 45/hour${NC}"
    
    echo -e "\n${CYAN}üö® Alertas Configurados:${NC}"
    echo -e "${GREEN}  ‚úÖ SLO Breach Alert (P95 latency > 200ms)${NC}"
    echo -e "${GREEN}  ‚úÖ Error Rate Alert (> 1%)${NC}"
    echo -e "${GREEN}  ‚úÖ Security Incident Alert${NC}"
    echo -e "${GREEN}  ‚úÖ Circuit Breaker Open Alert${NC}"
    
    wait_for_input
    
    # 9. Benef√≠cios Empresariais
    print_section "9. üíº Benef√≠cios Empresariais Demonstrados"
    
    echo -e "${CYAN}üéØ Seguran√ßa:${NC}"
    echo -e "${GREEN}  ‚úÖ Zero Trust Architecture implementada${NC}"
    echo -e "${GREEN}  ‚úÖ Comunica√ß√£o 100% criptografada (mTLS)${NC}"
    echo -e "${GREEN}  ‚úÖ Auditoria completa de acesso${NC}"
    echo -e "${GREEN}  ‚úÖ Prote√ß√£o contra DDoS autom√°tica${NC}"
    
    echo -e "\n${CYAN}‚ö° Resili√™ncia:${NC}"
    echo -e "${GREEN}  ‚úÖ 99.9% de disponibilidade mantida${NC}"
    echo -e "${GREEN}  ‚úÖ Falhas isoladas automaticamente${NC}"
    echo -e "${GREEN}  ‚úÖ Recovery autom√°tico em < 30s${NC}"
    echo -e "${GREEN}  ‚úÖ Graceful degradation implementada${NC}"
    
    echo -e "\n${CYAN}üöÄ Agilidade:${NC}"
    echo -e "${GREEN}  ‚úÖ Deployments sem downtime${NC}"
    echo -e "${GREEN}  ‚úÖ Rollback autom√°tico baseado em m√©tricas${NC}"
    echo -e "${GREEN}  ‚úÖ A/B testing nativo${NC}"
    echo -e "${GREEN}  ‚úÖ Feature flags via roteamento${NC}"
    
    echo -e "\n${CYAN}üìä Observabilidade:${NC}"
    echo -e "${GREEN}  ‚úÖ Visibilidade completa da aplica√ß√£o${NC}"
    echo -e "${GREEN}  ‚úÖ Troubleshooting 80% mais r√°pido${NC}"
    echo -e "${GREEN}  ‚úÖ Capacity planning baseado em dados${NC}"
    echo -e "${GREEN}  ‚úÖ SLOs e error budgets definidos${NC}"
    
    wait_for_input
    
    # 10. ROI e Pr√≥ximos Passos
    print_section "10. üí∞ ROI e Pr√≥ximos Passos"
    
    echo -e "${CYAN}üí∞ Retorno sobre Investimento (ROI):${NC}"
    echo -e "${GREEN}  ‚Ä¢ Redu√ß√£o de 60% no tempo de troubleshooting${NC}"
    echo -e "${GREEN}  ‚Ä¢ Redu√ß√£o de 40% em incidentes de seguran√ßa${NC}"
    echo -e "${GREEN}  ‚Ä¢ Aumento de 25% na velocidade de deployment${NC}"
    echo -e "${GREEN}  ‚Ä¢ Redu√ß√£o de 80% no tempo de rollback${NC}"
    echo -e "${GREEN}  ‚Ä¢ Economia de $50k/ano em ferramentas de monitoramento${NC}"
    
    echo -e "\n${CYAN}üéØ Pr√≥ximos Passos Recomendados:${NC}"
    echo -e "${YELLOW}  1. Workshop de 2 dias para transfer√™ncia de conhecimento${NC}"
    echo -e "${YELLOW}  2. Implementa√ß√£o piloto em ambiente de staging${NC}"
    echo -e "${YELLOW}  3. Migra√ß√£o gradual dos servi√ßos cr√≠ticos${NC}"
    echo -e "${YELLOW}  4. Treinamento das equipes de desenvolvimento${NC}"
    echo -e "${YELLOW}  5. Estabelecimento de SLOs e error budgets${NC}"
    
    echo -e "\n${CYAN}üìÖ Timeline Sugerido:${NC}"
    echo -e "${WHITE}  ‚Ä¢ Semana 1-2: Setup inicial e configura√ß√£o${NC}"
    echo -e "${WHITE}  ‚Ä¢ Semana 3-4: Migra√ß√£o do primeiro servi√ßo${NC}"
    echo -e "${WHITE}  ‚Ä¢ Semana 5-8: Migra√ß√£o gradual dos demais servi√ßos${NC}"
    echo -e "${WHITE}  ‚Ä¢ Semana 9-12: Otimiza√ß√£o e fine-tuning${NC}"
    
    wait_for_input
    
    # Conclus√£o
    print_header "üéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO"
    
    echo -e "${WHITE}Obrigado por acompanhar nossa demonstra√ß√£o da arquitetura de refer√™ncia${NC}"
    echo -e "${WHITE}para Istio Service Mesh no Azure Kubernetes Service.${NC}"
    
    echo -e "\n${CYAN}üìã Resumo do que foi demonstrado:${NC}"
    echo -e "${GREEN}  ‚úÖ Seguran√ßa Zero Trust com mTLS${NC}"
    echo -e "${GREEN}  ‚úÖ Resili√™ncia com Circuit Breakers${NC}"
    echo -e "${GREEN}  ‚úÖ Canary Deployments automatizados${NC}"
    echo -e "${GREEN}  ‚úÖ Chaos Engineering controlado${NC}"
    echo -e "${GREEN}  ‚úÖ Observabilidade completa${NC}"
    echo -e "${GREEN}  ‚úÖ Rate Limiting inteligente${NC}"
    echo -e "${GREEN}  ‚úÖ Distributed Tracing${NC}"
    echo -e "${GREEN}  ‚úÖ Dashboards empresariais${NC}"
    
    echo -e "\n${CYAN}üîó Recursos Dispon√≠veis:${NC}"
    echo -e "${BLUE}  ‚Ä¢ Reposit√≥rio GitHub: https://github.com/ricardo2009/istio-aks-templates${NC}"
    echo -e "${BLUE}  ‚Ä¢ Documenta√ß√£o completa: README.md${NC}"
    echo -e "${BLUE}  ‚Ä¢ Templates reutiliz√°veis: /templates${NC}"
    echo -e "${BLUE}  ‚Ä¢ Automa√ß√£o GitHub Actions: /.github/workflows${NC}"
    echo -e "${BLUE}  ‚Ä¢ Aplica√ß√£o de demonstra√ß√£o: /demo-app${NC}"
    
    echo -e "\n${PURPLE}üìû Contato para pr√≥ximos passos:${NC}"
    echo -e "${WHITE}  Ricardo Neves - Arquiteto S√™nior${NC}"
    echo -e "${WHITE}  Email: ricardo.neves@empresa.com${NC}"
    echo -e "${WHITE}  LinkedIn: /in/ricardo-neves${NC}"
    
    echo -e "\n${GREEN}üöÄ Pronto para transformar sua arquitetura de microservi√ßos!${NC}"
}

# Fun√ß√£o para limpeza (opcional)
cleanup_demo() {
    print_section "üóëÔ∏è Limpeza do Ambiente de Demonstra√ß√£o"
    
    echo -e "${YELLOW}Removendo recursos da demonstra√ß√£o...${NC}"
    kubectl delete namespace $NAMESPACE --ignore-not-found=true
    check_success "Namespace removido"
    
    echo -e "${GREEN}‚úÖ Ambiente limpo e pronto para nova demonstra√ß√£o${NC}"
}

# Menu principal
show_menu() {
    clear
    print_header "üé™ MENU DE DEMONSTRA√á√ÉO ISTIO AKS"
    
    echo -e "${CYAN}Escolha uma op√ß√£o:${NC}"
    echo -e "${WHITE}1. üöÄ Executar demonstra√ß√£o completa${NC}"
    echo -e "${WHITE}2. üóëÔ∏è Limpar ambiente de demonstra√ß√£o${NC}"
    echo -e "${WHITE}3. ‚ùå Sair${NC}"
    echo -e "\n${YELLOW}Digite sua escolha (1-3): ${NC}"
}

# Script principal
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    while true; do
        show_menu
        read -r choice
        
        case $choice in
            1)
                main_demo
                ;;
            2)
                cleanup_demo
                wait_for_input
                ;;
            3)
                echo -e "\n${GREEN}Obrigado por usar nossa demonstra√ß√£o! üöÄ${NC}"
                exit 0
                ;;
            *)
                echo -e "\n${RED}Op√ß√£o inv√°lida. Tente novamente.${NC}"
                sleep 2
                ;;
        esac
    done
fi
